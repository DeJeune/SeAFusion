{
 "runs":[
  {
   "tool":{
    "driver":{
     "name":"torch.onnx.dynamo_export",
     "contents":[
      "localizedData",
      "nonLocalizedData"
     ],
     "language":"en-US",
     "rules":[
      {
       "id":"FXE0016",
       "fullDescription":{
        "text":"This rule involves finding the list of OnnxFunction for the PyTorch operator overload in the ONNX registry. If the operator overload is not supported but its default overload is, a warning will be issued. If both the operator overload and its default overload are not supported, an error will be issued.",
        "markdown":"The operator overload name serves the purpose of verifying whether a PyTorch operator is registered in the ONNX registry.\nIf it's not found, the dispatcher takes a fallback approach and tries to locate the default overload of the PyTorch\noperator in the registry. If even the default overload is absent, it signifies that the operator is officially unsupported.\n\nThere are three types of level that can be triggered in this rule:\n\n1. NOTE: The op overload is supported.\n2. WARNING: The op overload is not supported, but it's default overload is supported.\n3. ERROR: The op overload is not supported, and it's default overload is also not supported.\n\nHere are some suggestions based on the WARNING situation:\n\n1. If there are NO errors or mismatches in the results, it is safe to disregard this warning.\n2. If there are errors or mismatches in the results, it is recommended to:\n  (a) Enable op_level_debugging to determine if the OnnxFunction might be incorrect.\n  (b) Report the unsupported overload to the PyTorch-ONNX team.\n  (c) Create/register a custom symbolic function to replace the default one.\n\nHere are some suggestions based on the ERROR situation:\n\n1. Report the unsupported operator to the PyTorch-ONNX team.\n2. Create/register a custom symbolic function to replace the default one.\n"
       },
       "name":"find-operator-overloads-in-onnx-registry",
       "shortDescription":{
        "text":"Find the list of OnnxFunction of the PyTorch operator in onnx registry."
       }
      },
      {
       "id":"FXE0014",
       "fullDescription":{
        "text":"Find the OnnxFunction that matches the input dtypes by comparing them with their opschemas. A warning will be issued if the matched OnnxFunction is not an exact match.",
        "markdown":"When an ATen/Custom operator is registered and needs to be dispatched to an OnnxFunction, the input/attribute\ndtypes of the ATen/Custom operator are compared with the input/attribute dtypes of the OnnxFunction opschemas\nto find a match. However, if a perfect/exact match is not found, the dispatcher will attempt to find\nthe nearest match with the highest number of input/attribute dtypes matching the OnnxFunction opschemas, while\nissuing a warning.\n\nThere are two types of level that can be triggered in this rule:\n\n1. NOTE: A perfect match is found, and no warning is issued.\n2. WARNING: The matched OnnxFunction is not a perfect/exact match.\n\nHere are some suggestions based on the WARNING situation:\n\n1. If there are NO errors or mismatches in the results, it is safe to disregard this warning,\n  as the definition of OnnxFunction schema is usually more stringent.\n2. If there are errors or mismatches in the results, it is recommended to:\n  (a) Enable op_level_debugging to determine if the OnnxFunction might be incorrect.\n  (b) Report the issue to the PyTorch-ONNX team.\n  (c) Create/register a custom symbolic function to replace the default one.\n"
       },
       "name":"find-opschema-matched-symbolic-function",
       "shortDescription":{
        "text":"Find the OnnxFunction that matches the input/attribute dtypes by comparing them with their opschemas."
       }
      },
      {
       "id":"FXE0015",
       "fullDescription":{
        "text":"Determine if type promotion is required for the FX node. Insert cast nodes if needed.",
        "markdown":"This diagnostic monitors the node-level type promotion insertion process. In PyTorch, there is an automatic process called implicit type promotion,\nwhere the input types of an operator are promoted to a common type. The determination of the common type is based on the type promotion rule specific to each operator.\nTo learn more about PyTorch's type promotion rules, refer to the [elementwise_dtypes doc](https://github.com/pytorch/pytorch/blob/f044613f78df713fb57f70c608483c9f10ad332e/torch/_prims_common/__init__.py#L1252-L1335)\nand [torch._refs ops](https://github.com/pytorch/pytorch/blob/a475ea4542dfe961c9d097e33ab5041f61c8c17f/torch/_refs/__init__.py#L484).\n\nHowever, implicit type promotion is not supported in ONNX. Therefore, to replicate the PyTorch behavior, we need to explicitly insert cast nodes.\nThis diagnostic tracks the process of node-level type promotion insertion.\n\nThe type promotion rules used by this process can be found in `torch/onnx/_internal/fx/passes/type_promotion.py.`\nTo update or add new type promotion rules, please refer to the [Note: Update type promotion rule] section.\n"
       },
       "name":"fx-node-insert-type-promotion",
       "shortDescription":{
        "text":"Determine if type promotion is required for the FX node. Insert cast nodes if needed."
       }
      },
      {
       "id":"FXE0007",
       "fullDescription":{
        "text":"Transforms graph from FX IR to ONNX IR.",
        "markdown":"This diagnostic tracks the transformation process from an FX Graph (in FX IR) to an ONNX Graph (in ONNX IR).\n\n## Key Representations:\n\n- **FX Graph**: The graph in FX IR produced by dynamo or symbolic tracing.\n- **ONNX Graph**: The graph in ONNX IR and [operators](https://onnx.ai/onnx/operators/).\n\n## Additional Notes:\n\n- Prior to this transformation step, the FX graph undergoes preprocessing through multiple FX passes.\n  To gain insight into these transformations, refer to diagnostic `FXE0010`.\n- To enable a detailed view of the graph transformation in progress within this diagnostic, switch to the DEBUG mode.\n\n  - Set DiagnosticOptions.verbosity_level to logging.DEBUG.\n  - Activate the environment variable TORCH_LOGS='onnx_diagnostics'.\n\n- For specific information related to node-level FX to ONNX transformations, explore the diagnostic `FXE0008`.\n"
       },
       "name":"fx-graph-to-onnx",
       "shortDescription":{
        "text":"Transforms graph from FX IR to ONNX IR."
       }
      },
      {
       "id":"FXE0008",
       "fullDescription":{
        "text":"Transforms an FX node to an ONNX node.",
        "markdown":"This diagnostic tracks the transformation process from an FX Node to ONNX [Operators](https://onnx.ai/onnx/operators/).\n\nThe process of converting FX Node to ONNX Node involves dealing with six distinct node types:\n  1. `placeholder`: Represents a module input, maps to an ONNX graph input.\n  2. `call_module`: Symbolizes a call to a submodule, maps to an ONNX\n  3. `call_method`: Symbolizes a method call. Not yet implemented.\n  4. `call_function`: Symbolizes a function call. [Core ATen](https://pytorch.org/docs/stable/ir.html#core-aten-ir) is expected\n    as the function call target. The mapping from ATen to ONNX is implemented by [ONNXScript torchlib](https://github.com/microsoft/onnxscript/tree/main/onnxscript/function_libs/torch_lib/ops).\n    This [guide](https://pytorch.org/docs/stable/onnx.html#onnx-script-functions) shows how to write and register a custom symbolic function for call_function FX node.\n  5. `get_attr`: Indicates an attribute access within the current module. Maps to an ONNX graph initializer.\n  6. `output`: Represents the module's output. Maps to an ONNX graph output.\n\nFor a granular understanding of how each node type is transformed, refer to the implementation details in `FxOnnxInterpreter`.\n"
       },
       "name":"fx-node-to-onnx",
       "shortDescription":{
        "text":"Transforms an FX node to an ONNX node."
       }
      },
      {
       "id":"FXE0010",
       "fullDescription":{
        "text":"FX graph transformation during ONNX export before converting from FX IR to ONNX IR.",
        "markdown":"This diagnostic tracks the FX passes executed during the ONNX export process prior\nto converting from FX IR (Intermediate Representation) to ONNX IR.\n\nUnder the scope of ONNX export, an FX pass refers to a specific transformation applied to the FX GraphModule.\nThe primary aim of these passes is to streamline the graph into a format that aligns more with the ONNX IR.\nMoreover, these passes work to substitute unsupported FX IR features with those recognized and endorsed by\nONNX IR. Common transformations include, but aren't limited to, decomposition, functionalization and\ntype promotion.\n\nFor those who are interested in a comprehensive log detailing the modifications made during these passes,\nthere are a couple of options:\n\n- Set DiagnosticOptions.verbosity_level to logging.DEBUG.\n- Activate the environment variable TORCH_LOGS='onnx_diagnostics'.\n\nHowever, it's noteworthy that by default, such detailed logging is turned off. The primary reason being\nits considerable impact on performance.\n\nFor an in-depth understanding of each specific pass, please refer to the directory: torch/onnx/_internal/fx/passes.\n"
       },
       "name":"fx-pass",
       "shortDescription":{
        "text":"FX graph transformation during ONNX export before converting from FX IR to ONNX IR."
       }
      }
     ],
     "version":"2.5.1+cu124"
    }
   },
   "language":"en-US",
   "newlineSequences":[
    "\r\n",
    "\n"
   ],
   "results":[
    {
     "message":{
      "markdown":"Running Decompose pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.decomp.Decompose'>\n- args: Tuple[length=1](\nTensor(f32[1, 3, 480, 640]),\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running Decompose pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running Functionalize pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.functionalization.Functionalize'>\n- args: Tuple[length=1](\nTensor(f32[1, 3, 480, 640]),\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running Functionalize pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running RemoveInputMutation pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.functionalization.RemoveInputMutation'>\n- args: Tuple[length=1](\nTensor(f32[1, 3, 480, 640]),\n)\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running RemoveInputMutation pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped l_x_: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(arg0)[placeholder]:Tensor(f32[1, 3, s1, s2])\n## Return values\nTensor(f32[1, 3, s1, s2])",
      "text":"Skipped l_x_: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant0: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant0)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64, 3, 7, 7]))",
      "text":"Skipped _param_constant0: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant1: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant1)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant1: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant2: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant2)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant2: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant0: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant0)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant0: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant1: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant1)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant1: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])",
      "text":"Type promotion not needed for relu. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.max_pool2d_with_indices.default)[call_function]:Tuple[length=2](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\n): Cannot find type promotion rule for op: aten.max_pool2d_with_indices.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.max_pool2d_with_indices.default)[call_function]:Tuple[length=2](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\n)\n## Return values\nTuple[length=2](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\n)",
      "text":"Skipped for fx.Node(aten.max_pool2d_with_indices.default)[call_function]:Tuple[length=2](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\n): Cannot find type promotion rule for op: aten.max_pool2d_with_indices.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant3: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant3)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64, 64, 3, 3]))",
      "text":"Skipped _param_constant3: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant4: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant4)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant4: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant5: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant5)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant5: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant2: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant2)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant2: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant3: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant3)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant3: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_5 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Type promotion not needed for relu_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant6: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant6)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64, 64, 3, 3]))",
      "text":"Skipped _param_constant6: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant7: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant7)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant7: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant8: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant8)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant8: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant4: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant4)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant4: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant5: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant5)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant5: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_16. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_3 is not promoted. Already torch.float32.\nArgument getitem_8 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Type promotion not needed for add_16. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_2. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_16 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Type promotion not needed for relu_2. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant9: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant9)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64, 64, 3, 3]))",
      "text":"Skipped _param_constant9: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant10: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant10)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant10: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant11: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant11)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant11: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant6: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant6)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant6: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant7: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant7)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant7: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_3. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_11 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Type promotion not needed for relu_3. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant12: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant12)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64, 64, 3, 3]))",
      "text":"Skipped _param_constant12: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant13: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant13)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant13: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant14: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant14)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant14: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant8: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant8)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant8: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant9: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant9)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant9: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_33. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument copy_2 is not promoted. Already torch.float32.\nArgument getitem_14 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Type promotion not needed for add_33. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_4. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_33 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Type promotion not needed for relu_4. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant15: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant15)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 64, 3, 3]))",
      "text":"Skipped _param_constant15: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant16: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant16)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant16: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant17: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant17)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant17: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant10: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant10)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant10: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant11: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant11)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant11: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_5. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_17 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for relu_5. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant18: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant18)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 3, 3]))",
      "text":"Skipped _param_constant18: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant19: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant19)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant19: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant20: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant20)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant20: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant12: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant12)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant12: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant13: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant13)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant13: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant21: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant21)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 64, 1, 1]))",
      "text":"Skipped _param_constant21: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant22: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant22)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant22: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant23: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant23)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant23: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant14: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant14)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant14: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant15: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant15)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant15: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_50. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_23 is not promoted. Already torch.float32.\nArgument getitem_20 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for add_50. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_6. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_50 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for relu_6. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//8) + 1): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//8) + 1)\n## Return values\nSymInt(((s1 - 1)//8) + 1)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//8) + 1): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//8) + 1): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//8) + 1)\n## Return values\nSymInt(((s2 - 1)//8) + 1)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//8) + 1): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant24: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant24)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 3, 3]))",
      "text":"Skipped _param_constant24: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant25: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant25)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant25: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant26: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant26)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant26: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant16: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant16)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant16: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant17: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant17)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant17: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_7. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_26 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for relu_7. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant27: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant27)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 3, 3]))",
      "text":"Skipped _param_constant27: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant28: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant28)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant28: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant29: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant29)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant29: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant18: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant18)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant18: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant19: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant19)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant19: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_67. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument copy_6 is not promoted. Already torch.float32.\nArgument getitem_29 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for add_67. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_8. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_67 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for relu_8. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant30: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant30)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256, 128, 3, 3]))",
      "text":"Skipped _param_constant30: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant31: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant31)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant31: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant32: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant32)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant32: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant20: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant20)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant20: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant21: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant21)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant21: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_9. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_32 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for relu_9. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant33: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant33)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256, 256, 3, 3]))",
      "text":"Skipped _param_constant33: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant34: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant34)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant34: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant35: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant35)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant35: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant22: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant22)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant22: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant23: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant23)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant23: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant36: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant36)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256, 128, 1, 1]))",
      "text":"Skipped _param_constant36: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant37: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant37)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant37: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant38: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant38)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant38: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant24: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant24)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant24: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant25: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant25)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant25: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_84. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_38 is not promoted. Already torch.float32.\nArgument getitem_35 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for add_84. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_10. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_84 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for relu_10. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//16) + 1): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//16) + 1)\n## Return values\nSymInt(((s1 - 1)//16) + 1)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//16) + 1): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//16) + 1): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//16) + 1)\n## Return values\nSymInt(((s2 - 1)//16) + 1)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//16) + 1): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant39: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant39)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256, 256, 3, 3]))",
      "text":"Skipped _param_constant39: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant40: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant40)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant40: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant41: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant41)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant41: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant26: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant26)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant26: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant27: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant27)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant27: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_11. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_41 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for relu_11. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant42: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant42)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256, 256, 3, 3]))",
      "text":"Skipped _param_constant42: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant43: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant43)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant43: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant44: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant44)[get_attr]:None\n## Return values\nParameter(Tensor(f32[256]))",
      "text":"Skipped _param_constant44: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant28: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant28)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant28: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant29: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant29)[get_attr]:None\n## Return values\nTensor(f32[256])",
      "text":"Skipped _tensor_constant29: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_101. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument copy_10 is not promoted. Already torch.float32.\nArgument getitem_44 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for add_101. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_12. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_101 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for relu_12. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant45: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant45)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 256, 3, 3]))",
      "text":"Skipped _param_constant45: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant46: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant46)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant46: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant47: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant47)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant47: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant30: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant30)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant30: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant31: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant31)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant31: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_13. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_47 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Type promotion not needed for relu_13. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant48: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant48)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 512, 3, 3]))",
      "text":"Skipped _param_constant48: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant49: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant49)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant49: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant50: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant50)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant50: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant32: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant32)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant32: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant33: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant33)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant33: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant51: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant51)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 256, 1, 1]))",
      "text":"Skipped _param_constant51: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant52: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant52)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant52: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant53: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant53)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant53: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant34: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant34)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant34: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant35: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant35)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant35: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_118. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_53 is not promoted. Already torch.float32.\nArgument getitem_50 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Type promotion not needed for add_118. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_14. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_118 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Type promotion not needed for relu_14. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant54: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant54)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 512, 3, 3]))",
      "text":"Skipped _param_constant54: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant55: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant55)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant55: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant56: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant56)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant56: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant36: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant36)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant36: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant37: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant37)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant37: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_15. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_56 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Type promotion not needed for relu_15. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant57: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant57)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512, 512, 3, 3]))",
      "text":"Skipped _param_constant57: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant58: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant58)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant58: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant59: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant59)[get_attr]:None\n## Return values\nParameter(Tensor(f32[512]))",
      "text":"Skipped _param_constant59: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant38: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant38)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant38: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant39: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant39)[get_attr]:None\n## Return values\nTensor(f32[512])",
      "text":"Skipped _tensor_constant39: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for add_135. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'add', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument copy_14 is not promoted. Already torch.float32.\nArgument getitem_59 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Type promotion not needed for add_135. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for relu_16. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument add_135 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Type promotion not needed for relu_16. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.copy.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.copy.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant60: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant60)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 512, 3, 3]))",
      "text":"Skipped _param_constant60: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant61: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant61)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant61: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant62: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant62)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant62: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant40: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant40)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant40: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant41: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant41)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant41: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_62 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Type promotion not needed for leaky_relu. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1]): Cannot find type promotion rule for op: aten.avg_pool2d.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n## Return values\nTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])",
      "text":"Skipped for fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1]): Cannot find type promotion rule for op: aten.avg_pool2d.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant63: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant63)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 1, 1]))",
      "text":"Skipped _param_constant63: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n## Return values\nTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant64: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant64)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant64: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant65: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant65)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant65: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant42: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant42)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant42: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant43: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant43)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant43: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1])\n## Return values\nTensor(f32[1, 128, 1, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for sigmoid. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'sigmoid', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument getitem_65 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, 1, 1])",
      "text":"Type promotion not needed for sigmoid. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, 1, 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n## Return values\nTensor(f32[1, 128, 1, 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, 1, 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_136. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument leaky_relu is not promoted. Already torch.float32.\nArgument sigmoid is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])",
      "text":"Type promotion not needed for mul_136. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant66: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant66)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 3, 3]))",
      "text":"Skipped _param_constant66: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant67: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant67)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant67: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant68: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant68)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant68: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant44: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant44)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant44: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant45: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant45)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant45: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_68 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for leaky_relu_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant69: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant69)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 256, 3, 3]))",
      "text":"Skipped _param_constant69: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant70: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant70)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant70: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant71: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant71)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant71: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant46: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant46)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant46: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant47: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant47)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant47: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu_2. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_71 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for leaky_relu_2. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1]): Cannot find type promotion rule for op: aten.avg_pool2d.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n## Return values\nTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])",
      "text":"Skipped for fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1]): Cannot find type promotion rule for op: aten.avg_pool2d.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant72: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant72)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 1, 1]))",
      "text":"Skipped _param_constant72: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n## Return values\nTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant73: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant73)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant73: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant74: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant74)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant74: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant48: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant48)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant48: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant49: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant49)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant49: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1])\n## Return values\nTensor(f32[1, 128, 1, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for sigmoid_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'sigmoid', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument getitem_74 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, 1, 1])",
      "text":"Type promotion not needed for sigmoid_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, 1, 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n## Return values\nTensor(f32[1, 128, 1, 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, 1, 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_137. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument leaky_relu_2 is not promoted. Already torch.float32.\nArgument sigmoid_1 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for mul_137. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for cat. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'cat', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.NO_OPMATH)\nArgument [leaky_relu_1, mul_137] is a tuple/list. Promoting each element.\nArgument leaky_relu_1 is not promoted. Already torch.float32.\nArgument mul_137 is not promoted. Already torch.float32.\nArgument 1 is not promoted. Not mentioned by type promotion rule.\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for cat. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant75: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant75)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 256, 1, 1]))",
      "text":"Skipped _param_constant75: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant76: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant76)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant76: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant77: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant77)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant77: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant50: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant50)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant50: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant51: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant51)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant51: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu_3. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_77 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for leaky_relu_3. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant78: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant78)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 3, 3]))",
      "text":"Skipped _param_constant78: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant79: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant79)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant79: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant80: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant80)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant80: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant52: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant52)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant52: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant53: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant53)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant53: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu_4. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_80 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for leaky_relu_4. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant81: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant81)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 3, 3]))",
      "text":"Skipped _param_constant81: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant82: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant82)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant82: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant83: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant83)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant83: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant54: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant54)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant54: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant55: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant55)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant55: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu_5. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_83 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for leaky_relu_5. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1]): Cannot find type promotion rule for op: aten.avg_pool2d.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n## Return values\nTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])",
      "text":"Skipped for fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1]): Cannot find type promotion rule for op: aten.avg_pool2d.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant84: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant84)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 1, 1]))",
      "text":"Skipped _param_constant84: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n## Return values\nTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant85: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant85)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant85: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant86: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant86)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant86: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant56: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant56)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant56: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant57: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant57)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant57: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1])\n## Return values\nTensor(f32[1, 128, 1, 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for sigmoid_2. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'sigmoid', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument getitem_86 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, 1, 1])",
      "text":"Type promotion not needed for sigmoid_2. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, 1, 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n## Return values\nTensor(f32[1, 128, 1, 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, 1, 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_138. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument leaky_relu_5 is not promoted. Already torch.float32.\nArgument sigmoid_2 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for mul_138. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for cat_1. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'cat', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.NO_OPMATH)\nArgument [leaky_relu_4, mul_138] is a tuple/list. Promoting each element.\nArgument leaky_relu_4 is not promoted. Already torch.float32.\nArgument mul_138 is not promoted. Already torch.float32.\nArgument 1 is not promoted. Not mentioned by type promotion rule.\n## Return values\nTensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for cat_1. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant87: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant87)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 256, 1, 1]))",
      "text":"Skipped _param_constant87: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant88: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant88)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant88: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant89: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant89)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant89: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant58: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant58)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant58: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant59: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant59)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant59: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu_6. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_89 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for leaky_relu_6. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant90: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant90)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 1, 1]))",
      "text":"Skipped _param_constant90: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant91: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant91)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant91: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant92: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant92)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant92: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant60: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant60)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant60: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant61: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant61)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant61: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for sigmoid_3. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'sigmoid', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument getitem_92 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for sigmoid_3. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_139. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument sigmoid_3 is not promoted. Already torch.float32.\nArgument upsample_bilinear2d_2 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for mul_139. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant93: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant93)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 1, 1]))",
      "text":"Skipped _param_constant93: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant94: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant94)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant94: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant95: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant95)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant95: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant62: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant62)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant62: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant63: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant63)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant63: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for sigmoid_4. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'sigmoid', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.INT_TO_FLOAT)\nArgument getitem_95 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for sigmoid_4. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.detach.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.detach.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for mul_140. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'mul', [0, 1], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument leaky_relu_6 is not promoted. Already torch.float32.\nArgument sigmoid_4 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for mul_140. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant96: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant96)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 1, 1]))",
      "text":"Skipped _param_constant96: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant97: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant97)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant97: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant98: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant98)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant98: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant64: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant64)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant64: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant65: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant65)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant65: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu_7. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_98 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for leaky_relu_7. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant99: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant99)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128, 128, 3, 3]))",
      "text":"Skipped _param_constant99: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant100: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant100)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant100: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant101: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant101)[get_attr]:None\n## Return values\nParameter(Tensor(f32[128]))",
      "text":"Skipped _param_constant101: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant66: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant66)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant66: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant67: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant67)[get_attr]:None\n## Return values\nTensor(f32[128])",
      "text":"Skipped _tensor_constant67: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu_8. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_101 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Type promotion not needed for leaky_relu_8. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant102: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant102)[get_attr]:None\n## Return values\nParameter(Tensor(f32[9, 128, 1, 1]))",
      "text":"Skipped _param_constant102: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n## Return values\nTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant103: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant103)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64, 128, 3, 3]))",
      "text":"Skipped _param_constant103: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0])\n## Return values\nTensor(u8[0])",
      "text":"Skipped for fx.Node(aten.empty.memory_format)[call_function]:Tensor(u8[0]): Cannot find type promotion rule for op: aten.empty.memory_format"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant104: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant104)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant104: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant105: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant105)[get_attr]:None\n## Return values\nParameter(Tensor(f32[64]))",
      "text":"Skipped _param_constant105: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant68: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant68)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant68: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _tensor_constant69: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_tensor_constant69)[get_attr]:None\n## Return values\nTensor(f32[64])",
      "text":"Skipped _tensor_constant69: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n## Return values\nTuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)",
      "text":"Skipped for fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n): Cannot find type promotion rule for op: aten._native_batch_norm_legit_no_training.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0])\n## Return values\nTensor(f32[0])",
      "text":"Skipped for fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[0]): node.target is not OpOverload. Got type: <class 'builtin_function_or_method'>"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Type promotion not needed for leaky_relu_9. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\nFound type promotion rule: ElementwiseTypePromotionRule('aten', 'leaky_relu', [0], [], ELEMENTWISE_TYPE_PROMOTION_KIND.DEFAULT)\nArgument getitem_104 is not promoted. Already torch.float32.\n## Return values\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Type promotion not needed for leaky_relu_9. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped _param_constant106: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(_param_constant106)[get_attr]:None\n## Return values\nParameter(Tensor(f32[9, 64, 1, 1]))",
      "text":"Skipped _param_constant106: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n## Return values\nTensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])",
      "text":"Skipped for fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]): Cannot find type promotion rule for op: aten.convolution.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(s1): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(s1)\n## Return values\nSymInt(s1)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(s1): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(s2): Cannot find type promotion rule for op: aten.sym_size.int\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(s2)\n## Return values\nSymInt(s2)",
      "text":"Skipped for fx.Node(aten.sym_size.int)[call_function]:SymInt(s2): Cannot find type promotion rule for op: aten.sym_size.int"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2])\n## Return values\nTensor(f32[1, 9, s1, s2])",
      "text":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2])\n## Return values\nTensor(f32[1, 9, s1, s2])",
      "text":"Skipped for fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2]): Cannot find type promotion rule for op: onnx_export.upsample_bilinear2d.default"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Skipped output: not a call_function.\n\n## Additional Message:\n\n## Function Signature\n### Function Signature _TypePromotionInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion._TypePromotionInterpreter'>\n- node: fx.Node(output)[output]:None\n## Return values\nList[length=2](\nTensor(f32[1, 9, s1, s2]),\nTensor(f32[1, 9, s1, s2]),\n)",
      "text":"Skipped output: not a call_function."
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"_TypePromotionInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/passes/type_promotion.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":1607
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0015",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running InsertTypePromotion pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.type_promotion.InsertTypePromotion'>\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running InsertTypePromotion pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running RestoreParameterAndBufferNames pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.readability.RestoreParameterAndBufferNames'>\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\nRenamed 'self._param_constant0' to 'self.cp/resnet/conv1/weight', normalized from original parameter name 'cp.resnet.conv1.weight'.\nRenamed 'self._param_constant1' to 'self.cp/resnet/bn1/weight', normalized from original parameter name 'cp.resnet.bn1.weight'.\nRenamed 'self._param_constant2' to 'self.cp/resnet/bn1/bias', normalized from original parameter name 'cp.resnet.bn1.bias'.\nRenamed 'self._tensor_constant0' to 'self.cp/resnet/bn1/running_mean', normalized from original parameter name 'cp.resnet.bn1.running_mean'.\nRenamed 'self._tensor_constant1' to 'self.cp/resnet/bn1/running_var', normalized from original parameter name 'cp.resnet.bn1.running_var'.\nRenamed 'self._param_constant3' to 'self.cp/resnet/layer1/0/conv1/weight', normalized from original parameter name 'cp.resnet.layer1.0.conv1.weight'.\nRenamed 'self._param_constant4' to 'self.cp/resnet/layer1/0/bn1/weight', normalized from original parameter name 'cp.resnet.layer1.0.bn1.weight'.\nRenamed 'self._param_constant5' to 'self.cp/resnet/layer1/0/bn1/bias', normalized from original parameter name 'cp.resnet.layer1.0.bn1.bias'.\nRenamed 'self._tensor_constant2' to 'self.cp/resnet/layer1/0/bn1/running_mean', normalized from original parameter name 'cp.resnet.layer1.0.bn1.running_mean'.\nRenamed 'self._tensor_constant3' to 'self.cp/resnet/layer1/0/bn1/running_var', normalized from original parameter name 'cp.resnet.layer1.0.bn1.running_var'.\nRenamed 'self._param_constant6' to 'self.cp/resnet/layer1/0/conv2/weight', normalized from original parameter name 'cp.resnet.layer1.0.conv2.weight'.\nRenamed 'self._param_constant7' to 'self.cp/resnet/layer1/0/bn2/weight', normalized from original parameter name 'cp.resnet.layer1.0.bn2.weight'.\nRenamed 'self._param_constant8' to 'self.cp/resnet/layer1/0/bn2/bias', normalized from original parameter name 'cp.resnet.layer1.0.bn2.bias'.\nRenamed 'self._tensor_constant4' to 'self.cp/resnet/layer1/0/bn2/running_mean', normalized from original parameter name 'cp.resnet.layer1.0.bn2.running_mean'.\nRenamed 'self._tensor_constant5' to 'self.cp/resnet/layer1/0/bn2/running_var', normalized from original parameter name 'cp.resnet.layer1.0.bn2.running_var'.\nRenamed 'self._param_constant9' to 'self.cp/resnet/layer1/1/conv1/weight', normalized from original parameter name 'cp.resnet.layer1.1.conv1.weight'.\nRenamed 'self._param_constant10' to 'self.cp/resnet/layer1/1/bn1/weight', normalized from original parameter name 'cp.resnet.layer1.1.bn1.weight'.\nRenamed 'self._param_constant11' to 'self.cp/resnet/layer1/1/bn1/bias', normalized from original parameter name 'cp.resnet.layer1.1.bn1.bias'.\nRenamed 'self._tensor_constant6' to 'self.cp/resnet/layer1/1/bn1/running_mean', normalized from original parameter name 'cp.resnet.layer1.1.bn1.running_mean'.\nRenamed 'self._tensor_constant7' to 'self.cp/resnet/layer1/1/bn1/running_var', normalized from original parameter name 'cp.resnet.layer1.1.bn1.running_var'.\nRenamed 'self._param_constant12' to 'self.cp/resnet/layer1/1/conv2/weight', normalized from original parameter name 'cp.resnet.layer1.1.conv2.weight'.\nRenamed 'self._param_constant13' to 'self.cp/resnet/layer1/1/bn2/weight', normalized from original parameter name 'cp.resnet.layer1.1.bn2.weight'.\nRenamed 'self._param_constant14' to 'self.cp/resnet/layer1/1/bn2/bias', normalized from original parameter name 'cp.resnet.layer1.1.bn2.bias'.\nRenamed 'self._tensor_constant8' to 'self.cp/resnet/layer1/1/bn2/running_mean', normalized from original parameter name 'cp.resnet.layer1.1.bn2.running_mean'.\nRenamed 'self._tensor_constant9' to 'self.cp/resnet/layer1/1/bn2/running_var', normalized from original parameter name 'cp.resnet.layer1.1.bn2.running_var'.\nRenamed 'self._param_constant15' to 'self.cp/resnet/layer2/0/conv1/weight', normalized from original parameter name 'cp.resnet.layer2.0.conv1.weight'.\nRenamed 'self._param_constant16' to 'self.cp/resnet/layer2/0/bn1/weight', normalized from original parameter name 'cp.resnet.layer2.0.bn1.weight'.\nRenamed 'self._param_constant17' to 'self.cp/resnet/layer2/0/bn1/bias', normalized from original parameter name 'cp.resnet.layer2.0.bn1.bias'.\nRenamed 'self._tensor_constant10' to 'self.cp/resnet/layer2/0/bn1/running_mean', normalized from original parameter name 'cp.resnet.layer2.0.bn1.running_mean'.\nRenamed 'self._tensor_constant11' to 'self.cp/resnet/layer2/0/bn1/running_var', normalized from original parameter name 'cp.resnet.layer2.0.bn1.running_var'.\nRenamed 'self._param_constant18' to 'self.cp/resnet/layer2/0/conv2/weight', normalized from original parameter name 'cp.resnet.layer2.0.conv2.weight'.\nRenamed 'self._param_constant19' to 'self.cp/resnet/layer2/0/bn2/weight', normalized from original parameter name 'cp.resnet.layer2.0.bn2.weight'.\nRenamed 'self._param_constant20' to 'self.cp/resnet/layer2/0/bn2/bias', normalized from original parameter name 'cp.resnet.layer2.0.bn2.bias'.\nRenamed 'self._tensor_constant12' to 'self.cp/resnet/layer2/0/bn2/running_mean', normalized from original parameter name 'cp.resnet.layer2.0.bn2.running_mean'.\nRenamed 'self._tensor_constant13' to 'self.cp/resnet/layer2/0/bn2/running_var', normalized from original parameter name 'cp.resnet.layer2.0.bn2.running_var'.\nRenamed 'self._param_constant21' to 'self.cp/resnet/layer2/0/downsample/0/weight', normalized from original parameter name 'cp.resnet.layer2.0.downsample.0.weight'.\nRenamed 'self._param_constant22' to 'self.cp/resnet/layer2/0/downsample/1/weight', normalized from original parameter name 'cp.resnet.layer2.0.downsample.1.weight'.\nRenamed 'self._param_constant23' to 'self.cp/resnet/layer2/0/downsample/1/bias', normalized from original parameter name 'cp.resnet.layer2.0.downsample.1.bias'.\nRenamed 'self._tensor_constant14' to 'self.cp/resnet/layer2/0/downsample/1/running_mean', normalized from original parameter name 'cp.resnet.layer2.0.downsample.1.running_mean'.\nRenamed 'self._tensor_constant15' to 'self.cp/resnet/layer2/0/downsample/1/running_var', normalized from original parameter name 'cp.resnet.layer2.0.downsample.1.running_var'.\nRenamed 'self._param_constant24' to 'self.cp/resnet/layer2/1/conv1/weight', normalized from original parameter name 'cp.resnet.layer2.1.conv1.weight'.\nRenamed 'self._param_constant25' to 'self.cp/resnet/layer2/1/bn1/weight', normalized from original parameter name 'cp.resnet.layer2.1.bn1.weight'.\nRenamed 'self._param_constant26' to 'self.cp/resnet/layer2/1/bn1/bias', normalized from original parameter name 'cp.resnet.layer2.1.bn1.bias'.\nRenamed 'self._tensor_constant16' to 'self.cp/resnet/layer2/1/bn1/running_mean', normalized from original parameter name 'cp.resnet.layer2.1.bn1.running_mean'.\nRenamed 'self._tensor_constant17' to 'self.cp/resnet/layer2/1/bn1/running_var', normalized from original parameter name 'cp.resnet.layer2.1.bn1.running_var'.\nRenamed 'self._param_constant27' to 'self.cp/resnet/layer2/1/conv2/weight', normalized from original parameter name 'cp.resnet.layer2.1.conv2.weight'.\nRenamed 'self._param_constant28' to 'self.cp/resnet/layer2/1/bn2/weight', normalized from original parameter name 'cp.resnet.layer2.1.bn2.weight'.\nRenamed 'self._param_constant29' to 'self.cp/resnet/layer2/1/bn2/bias', normalized from original parameter name 'cp.resnet.layer2.1.bn2.bias'.\nRenamed 'self._tensor_constant18' to 'self.cp/resnet/layer2/1/bn2/running_mean', normalized from original parameter name 'cp.resnet.layer2.1.bn2.running_mean'.\nRenamed 'self._tensor_constant19' to 'self.cp/resnet/layer2/1/bn2/running_var', normalized from original parameter name 'cp.resnet.layer2.1.bn2.running_var'.\nRenamed 'self._param_constant30' to 'self.cp/resnet/layer3/0/conv1/weight', normalized from original parameter name 'cp.resnet.layer3.0.conv1.weight'.\nRenamed 'self._param_constant31' to 'self.cp/resnet/layer3/0/bn1/weight', normalized from original parameter name 'cp.resnet.layer3.0.bn1.weight'.\nRenamed 'self._param_constant32' to 'self.cp/resnet/layer3/0/bn1/bias', normalized from original parameter name 'cp.resnet.layer3.0.bn1.bias'.\nRenamed 'self._tensor_constant20' to 'self.cp/resnet/layer3/0/bn1/running_mean', normalized from original parameter name 'cp.resnet.layer3.0.bn1.running_mean'.\nRenamed 'self._tensor_constant21' to 'self.cp/resnet/layer3/0/bn1/running_var', normalized from original parameter name 'cp.resnet.layer3.0.bn1.running_var'.\nRenamed 'self._param_constant33' to 'self.cp/resnet/layer3/0/conv2/weight', normalized from original parameter name 'cp.resnet.layer3.0.conv2.weight'.\nRenamed 'self._param_constant34' to 'self.cp/resnet/layer3/0/bn2/weight', normalized from original parameter name 'cp.resnet.layer3.0.bn2.weight'.\nRenamed 'self._param_constant35' to 'self.cp/resnet/layer3/0/bn2/bias', normalized from original parameter name 'cp.resnet.layer3.0.bn2.bias'.\nRenamed 'self._tensor_constant22' to 'self.cp/resnet/layer3/0/bn2/running_mean', normalized from original parameter name 'cp.resnet.layer3.0.bn2.running_mean'.\nRenamed 'self._tensor_constant23' to 'self.cp/resnet/layer3/0/bn2/running_var', normalized from original parameter name 'cp.resnet.layer3.0.bn2.running_var'.\nRenamed 'self._param_constant36' to 'self.cp/resnet/layer3/0/downsample/0/weight', normalized from original parameter name 'cp.resnet.layer3.0.downsample.0.weight'.\nRenamed 'self._param_constant37' to 'self.cp/resnet/layer3/0/downsample/1/weight', normalized from original parameter name 'cp.resnet.layer3.0.downsample.1.weight'.\nRenamed 'self._param_constant38' to 'self.cp/resnet/layer3/0/downsample/1/bias', normalized from original parameter name 'cp.resnet.layer3.0.downsample.1.bias'.\nRenamed 'self._tensor_constant24' to 'self.cp/resnet/layer3/0/downsample/1/running_mean', normalized from original parameter name 'cp.resnet.layer3.0.downsample.1.running_mean'.\nRenamed 'self._tensor_constant25' to 'self.cp/resnet/layer3/0/downsample/1/running_var', normalized from original parameter name 'cp.resnet.layer3.0.downsample.1.running_var'.\nRenamed 'self._param_constant39' to 'self.cp/resnet/layer3/1/conv1/weight', normalized from original parameter name 'cp.resnet.layer3.1.conv1.weight'.\nRenamed 'self._param_constant40' to 'self.cp/resnet/layer3/1/bn1/weight', normalized from original parameter name 'cp.resnet.layer3.1.bn1.weight'.\nRenamed 'self._param_constant41' to 'self.cp/resnet/layer3/1/bn1/bias', normalized from original parameter name 'cp.resnet.layer3.1.bn1.bias'.\nRenamed 'self._tensor_constant26' to 'self.cp/resnet/layer3/1/bn1/running_mean', normalized from original parameter name 'cp.resnet.layer3.1.bn1.running_mean'.\nRenamed 'self._tensor_constant27' to 'self.cp/resnet/layer3/1/bn1/running_var', normalized from original parameter name 'cp.resnet.layer3.1.bn1.running_var'.\nRenamed 'self._param_constant42' to 'self.cp/resnet/layer3/1/conv2/weight', normalized from original parameter name 'cp.resnet.layer3.1.conv2.weight'.\nRenamed 'self._param_constant43' to 'self.cp/resnet/layer3/1/bn2/weight', normalized from original parameter name 'cp.resnet.layer3.1.bn2.weight'.\nRenamed 'self._param_constant44' to 'self.cp/resnet/layer3/1/bn2/bias', normalized from original parameter name 'cp.resnet.layer3.1.bn2.bias'.\nRenamed 'self._tensor_constant28' to 'self.cp/resnet/layer3/1/bn2/running_mean', normalized from original parameter name 'cp.resnet.layer3.1.bn2.running_mean'.\nRenamed 'self._tensor_constant29' to 'self.cp/resnet/layer3/1/bn2/running_var', normalized from original parameter name 'cp.resnet.layer3.1.bn2.running_var'.\nRenamed 'self._param_constant45' to 'self.cp/resnet/layer4/0/conv1/weight', normalized from original parameter name 'cp.resnet.layer4.0.conv1.weight'.\nRenamed 'self._param_constant46' to 'self.cp/resnet/layer4/0/bn1/weight', normalized from original parameter name 'cp.resnet.layer4.0.bn1.weight'.\nRenamed 'self._param_constant47' to 'self.cp/resnet/layer4/0/bn1/bias', normalized from original parameter name 'cp.resnet.layer4.0.bn1.bias'.\nRenamed 'self._tensor_constant30' to 'self.cp/resnet/layer4/0/bn1/running_mean', normalized from original parameter name 'cp.resnet.layer4.0.bn1.running_mean'.\nRenamed 'self._tensor_constant31' to 'self.cp/resnet/layer4/0/bn1/running_var', normalized from original parameter name 'cp.resnet.layer4.0.bn1.running_var'.\nRenamed 'self._param_constant48' to 'self.cp/resnet/layer4/0/conv2/weight', normalized from original parameter name 'cp.resnet.layer4.0.conv2.weight'.\nRenamed 'self._param_constant49' to 'self.cp/resnet/layer4/0/bn2/weight', normalized from original parameter name 'cp.resnet.layer4.0.bn2.weight'.\nRenamed 'self._param_constant50' to 'self.cp/resnet/layer4/0/bn2/bias', normalized from original parameter name 'cp.resnet.layer4.0.bn2.bias'.\nRenamed 'self._tensor_constant32' to 'self.cp/resnet/layer4/0/bn2/running_mean', normalized from original parameter name 'cp.resnet.layer4.0.bn2.running_mean'.\nRenamed 'self._tensor_constant33' to 'self.cp/resnet/layer4/0/bn2/running_var', normalized from original parameter name 'cp.resnet.layer4.0.bn2.running_var'.\nRenamed 'self._param_constant51' to 'self.cp/resnet/layer4/0/downsample/0/weight', normalized from original parameter name 'cp.resnet.layer4.0.downsample.0.weight'.\nRenamed 'self._param_constant52' to 'self.cp/resnet/layer4/0/downsample/1/weight', normalized from original parameter name 'cp.resnet.layer4.0.downsample.1.weight'.\nRenamed 'self._param_constant53' to 'self.cp/resnet/layer4/0/downsample/1/bias', normalized from original parameter name 'cp.resnet.layer4.0.downsample.1.bias'.\nRenamed 'self._tensor_constant34' to 'self.cp/resnet/layer4/0/downsample/1/running_mean', normalized from original parameter name 'cp.resnet.layer4.0.downsample.1.running_mean'.\nRenamed 'self._tensor_constant35' to 'self.cp/resnet/layer4/0/downsample/1/running_var', normalized from original parameter name 'cp.resnet.layer4.0.downsample.1.running_var'.\nRenamed 'self._param_constant54' to 'self.cp/resnet/layer4/1/conv1/weight', normalized from original parameter name 'cp.resnet.layer4.1.conv1.weight'.\nRenamed 'self._param_constant55' to 'self.cp/resnet/layer4/1/bn1/weight', normalized from original parameter name 'cp.resnet.layer4.1.bn1.weight'.\nRenamed 'self._param_constant56' to 'self.cp/resnet/layer4/1/bn1/bias', normalized from original parameter name 'cp.resnet.layer4.1.bn1.bias'.\nRenamed 'self._tensor_constant36' to 'self.cp/resnet/layer4/1/bn1/running_mean', normalized from original parameter name 'cp.resnet.layer4.1.bn1.running_mean'.\nRenamed 'self._tensor_constant37' to 'self.cp/resnet/layer4/1/bn1/running_var', normalized from original parameter name 'cp.resnet.layer4.1.bn1.running_var'.\nRenamed 'self._param_constant57' to 'self.cp/resnet/layer4/1/conv2/weight', normalized from original parameter name 'cp.resnet.layer4.1.conv2.weight'.\nRenamed 'self._param_constant58' to 'self.cp/resnet/layer4/1/bn2/weight', normalized from original parameter name 'cp.resnet.layer4.1.bn2.weight'.\nRenamed 'self._param_constant59' to 'self.cp/resnet/layer4/1/bn2/bias', normalized from original parameter name 'cp.resnet.layer4.1.bn2.bias'.\nRenamed 'self._tensor_constant38' to 'self.cp/resnet/layer4/1/bn2/running_mean', normalized from original parameter name 'cp.resnet.layer4.1.bn2.running_mean'.\nRenamed 'self._tensor_constant39' to 'self.cp/resnet/layer4/1/bn2/running_var', normalized from original parameter name 'cp.resnet.layer4.1.bn2.running_var'.\nRenamed 'self._param_constant60' to 'self.cp/arm32/conv/conv/weight', normalized from original parameter name 'cp.arm32.conv.conv.weight'.\nRenamed 'self._param_constant61' to 'self.cp/arm32/conv/bn/weight', normalized from original parameter name 'cp.arm32.conv.bn.weight'.\nRenamed 'self._param_constant62' to 'self.cp/arm32/conv/bn/bias', normalized from original parameter name 'cp.arm32.conv.bn.bias'.\nRenamed 'self._tensor_constant40' to 'self.cp/arm32/conv/bn/running_mean', normalized from original parameter name 'cp.arm32.conv.bn.running_mean'.\nRenamed 'self._tensor_constant41' to 'self.cp/arm32/conv/bn/running_var', normalized from original parameter name 'cp.arm32.conv.bn.running_var'.\nRenamed 'self._param_constant63' to 'self.cp/arm32/conv_atten/weight', normalized from original parameter name 'cp.arm32.conv_atten.weight'.\nRenamed 'self._param_constant64' to 'self.cp/arm32/bn_atten/weight', normalized from original parameter name 'cp.arm32.bn_atten.weight'.\nRenamed 'self._param_constant65' to 'self.cp/arm32/bn_atten/bias', normalized from original parameter name 'cp.arm32.bn_atten.bias'.\nRenamed 'self._tensor_constant42' to 'self.cp/arm32/bn_atten/running_mean', normalized from original parameter name 'cp.arm32.bn_atten.running_mean'.\nRenamed 'self._tensor_constant43' to 'self.cp/arm32/bn_atten/running_var', normalized from original parameter name 'cp.arm32.bn_atten.running_var'.\nRenamed 'self._param_constant66' to 'self.cp/conv_head32/conv/weight', normalized from original parameter name 'cp.conv_head32.conv.weight'.\nRenamed 'self._param_constant67' to 'self.cp/conv_head32/bn/weight', normalized from original parameter name 'cp.conv_head32.bn.weight'.\nRenamed 'self._param_constant68' to 'self.cp/conv_head32/bn/bias', normalized from original parameter name 'cp.conv_head32.bn.bias'.\nRenamed 'self._tensor_constant44' to 'self.cp/conv_head32/bn/running_mean', normalized from original parameter name 'cp.conv_head32.bn.running_mean'.\nRenamed 'self._tensor_constant45' to 'self.cp/conv_head32/bn/running_var', normalized from original parameter name 'cp.conv_head32.bn.running_var'.\nRenamed 'self._param_constant69' to 'self.cp/arm16/conv/conv/weight', normalized from original parameter name 'cp.arm16.conv.conv.weight'.\nRenamed 'self._param_constant70' to 'self.cp/arm16/conv/bn/weight', normalized from original parameter name 'cp.arm16.conv.bn.weight'.\nRenamed 'self._param_constant71' to 'self.cp/arm16/conv/bn/bias', normalized from original parameter name 'cp.arm16.conv.bn.bias'.\nRenamed 'self._tensor_constant46' to 'self.cp/arm16/conv/bn/running_mean', normalized from original parameter name 'cp.arm16.conv.bn.running_mean'.\nRenamed 'self._tensor_constant47' to 'self.cp/arm16/conv/bn/running_var', normalized from original parameter name 'cp.arm16.conv.bn.running_var'.\nRenamed 'self._param_constant72' to 'self.cp/arm16/conv_atten/weight', normalized from original parameter name 'cp.arm16.conv_atten.weight'.\nRenamed 'self._param_constant73' to 'self.cp/arm16/bn_atten/weight', normalized from original parameter name 'cp.arm16.bn_atten.weight'.\nRenamed 'self._param_constant74' to 'self.cp/arm16/bn_atten/bias', normalized from original parameter name 'cp.arm16.bn_atten.bias'.\nRenamed 'self._tensor_constant48' to 'self.cp/arm16/bn_atten/running_mean', normalized from original parameter name 'cp.arm16.bn_atten.running_mean'.\nRenamed 'self._tensor_constant49' to 'self.cp/arm16/bn_atten/running_var', normalized from original parameter name 'cp.arm16.bn_atten.running_var'.\nRenamed 'self._param_constant75' to 'self.cp/sp16/conv/weight', normalized from original parameter name 'cp.sp16.conv.weight'.\nRenamed 'self._param_constant76' to 'self.cp/sp16/bn/weight', normalized from original parameter name 'cp.sp16.bn.weight'.\nRenamed 'self._param_constant77' to 'self.cp/sp16/bn/bias', normalized from original parameter name 'cp.sp16.bn.bias'.\nRenamed 'self._tensor_constant50' to 'self.cp/sp16/bn/running_mean', normalized from original parameter name 'cp.sp16.bn.running_mean'.\nRenamed 'self._tensor_constant51' to 'self.cp/sp16/bn/running_var', normalized from original parameter name 'cp.sp16.bn.running_var'.\nRenamed 'self._param_constant78' to 'self.cp/conv_head16/conv/weight', normalized from original parameter name 'cp.conv_head16.conv.weight'.\nRenamed 'self._param_constant79' to 'self.cp/conv_head16/bn/weight', normalized from original parameter name 'cp.conv_head16.bn.weight'.\nRenamed 'self._param_constant80' to 'self.cp/conv_head16/bn/bias', normalized from original parameter name 'cp.conv_head16.bn.bias'.\nRenamed 'self._tensor_constant52' to 'self.cp/conv_head16/bn/running_mean', normalized from original parameter name 'cp.conv_head16.bn.running_mean'.\nRenamed 'self._tensor_constant53' to 'self.cp/conv_head16/bn/running_var', normalized from original parameter name 'cp.conv_head16.bn.running_var'.\nRenamed 'self._param_constant81' to 'self.cp/arm8/conv/conv/weight', normalized from original parameter name 'cp.arm8.conv.conv.weight'.\nRenamed 'self._param_constant82' to 'self.cp/arm8/conv/bn/weight', normalized from original parameter name 'cp.arm8.conv.bn.weight'.\nRenamed 'self._param_constant83' to 'self.cp/arm8/conv/bn/bias', normalized from original parameter name 'cp.arm8.conv.bn.bias'.\nRenamed 'self._tensor_constant54' to 'self.cp/arm8/conv/bn/running_mean', normalized from original parameter name 'cp.arm8.conv.bn.running_mean'.\nRenamed 'self._tensor_constant55' to 'self.cp/arm8/conv/bn/running_var', normalized from original parameter name 'cp.arm8.conv.bn.running_var'.\nRenamed 'self._param_constant84' to 'self.cp/arm8/conv_atten/weight', normalized from original parameter name 'cp.arm8.conv_atten.weight'.\nRenamed 'self._param_constant85' to 'self.cp/arm8/bn_atten/weight', normalized from original parameter name 'cp.arm8.bn_atten.weight'.\nRenamed 'self._param_constant86' to 'self.cp/arm8/bn_atten/bias', normalized from original parameter name 'cp.arm8.bn_atten.bias'.\nRenamed 'self._tensor_constant56' to 'self.cp/arm8/bn_atten/running_mean', normalized from original parameter name 'cp.arm8.bn_atten.running_mean'.\nRenamed 'self._tensor_constant57' to 'self.cp/arm8/bn_atten/running_var', normalized from original parameter name 'cp.arm8.bn_atten.running_var'.\nRenamed 'self._param_constant87' to 'self.cp/sp8/conv/weight', normalized from original parameter name 'cp.sp8.conv.weight'.\nRenamed 'self._param_constant88' to 'self.cp/sp8/bn/weight', normalized from original parameter name 'cp.sp8.bn.weight'.\nRenamed 'self._param_constant89' to 'self.cp/sp8/bn/bias', normalized from original parameter name 'cp.sp8.bn.bias'.\nRenamed 'self._tensor_constant58' to 'self.cp/sp8/bn/running_mean', normalized from original parameter name 'cp.sp8.bn.running_mean'.\nRenamed 'self._tensor_constant59' to 'self.cp/sp8/bn/running_var', normalized from original parameter name 'cp.sp8.bn.running_var'.\nRenamed 'self._param_constant90' to 'self.cp/conv_fuse1/conv/weight', normalized from original parameter name 'cp.conv_fuse1.conv.weight'.\nRenamed 'self._param_constant91' to 'self.cp/conv_fuse1/bn/weight', normalized from original parameter name 'cp.conv_fuse1.bn.weight'.\nRenamed 'self._param_constant92' to 'self.cp/conv_fuse1/bn/bias', normalized from original parameter name 'cp.conv_fuse1.bn.bias'.\nRenamed 'self._tensor_constant60' to 'self.cp/conv_fuse1/bn/running_mean', normalized from original parameter name 'cp.conv_fuse1.bn.running_mean'.\nRenamed 'self._tensor_constant61' to 'self.cp/conv_fuse1/bn/running_var', normalized from original parameter name 'cp.conv_fuse1.bn.running_var'.\nRenamed 'self._param_constant93' to 'self.cp/conv_fuse2/conv/weight', normalized from original parameter name 'cp.conv_fuse2.conv.weight'.\nRenamed 'self._param_constant94' to 'self.cp/conv_fuse2/bn/weight', normalized from original parameter name 'cp.conv_fuse2.bn.weight'.\nRenamed 'self._param_constant95' to 'self.cp/conv_fuse2/bn/bias', normalized from original parameter name 'cp.conv_fuse2.bn.bias'.\nRenamed 'self._tensor_constant62' to 'self.cp/conv_fuse2/bn/running_mean', normalized from original parameter name 'cp.conv_fuse2.bn.running_mean'.\nRenamed 'self._tensor_constant63' to 'self.cp/conv_fuse2/bn/running_var', normalized from original parameter name 'cp.conv_fuse2.bn.running_var'.\nRenamed 'self._param_constant96' to 'self.cp/conv_fuse/conv/weight', normalized from original parameter name 'cp.conv_fuse.conv.weight'.\nRenamed 'self._param_constant97' to 'self.cp/conv_fuse/bn/weight', normalized from original parameter name 'cp.conv_fuse.bn.weight'.\nRenamed 'self._param_constant98' to 'self.cp/conv_fuse/bn/bias', normalized from original parameter name 'cp.conv_fuse.bn.bias'.\nRenamed 'self._tensor_constant64' to 'self.cp/conv_fuse/bn/running_mean', normalized from original parameter name 'cp.conv_fuse.bn.running_mean'.\nRenamed 'self._tensor_constant65' to 'self.cp/conv_fuse/bn/running_var', normalized from original parameter name 'cp.conv_fuse.bn.running_var'.\nRenamed 'self._param_constant99' to 'self.conv_out/conv/conv/weight', normalized from original parameter name 'conv_out.conv.conv.weight'.\nRenamed 'self._param_constant100' to 'self.conv_out/conv/bn/weight', normalized from original parameter name 'conv_out.conv.bn.weight'.\nRenamed 'self._param_constant101' to 'self.conv_out/conv/bn/bias', normalized from original parameter name 'conv_out.conv.bn.bias'.\nRenamed 'self._tensor_constant66' to 'self.conv_out/conv/bn/running_mean', normalized from original parameter name 'conv_out.conv.bn.running_mean'.\nRenamed 'self._tensor_constant67' to 'self.conv_out/conv/bn/running_var', normalized from original parameter name 'conv_out.conv.bn.running_var'.\nRenamed 'self._param_constant102' to 'self.conv_out/conv_out/weight', normalized from original parameter name 'conv_out.conv_out.weight'.\nRenamed 'self._param_constant103' to 'self.conv_out16/conv/conv/weight', normalized from original parameter name 'conv_out16.conv.conv.weight'.\nRenamed 'self._param_constant104' to 'self.conv_out16/conv/bn/weight', normalized from original parameter name 'conv_out16.conv.bn.weight'.\nRenamed 'self._param_constant105' to 'self.conv_out16/conv/bn/bias', normalized from original parameter name 'conv_out16.conv.bn.bias'.\nRenamed 'self._tensor_constant68' to 'self.conv_out16/conv/bn/running_mean', normalized from original parameter name 'conv_out16.conv.bn.running_mean'.\nRenamed 'self._tensor_constant69' to 'self.conv_out16/conv/bn/running_var', normalized from original parameter name 'conv_out16.conv.bn.running_var'.\nRenamed 'self._param_constant106' to 'self.conv_out16/conv_out/weight', normalized from original parameter name 'conv_out16.conv_out.weight'.\n## Return values\ntorch.fx.GraphModule(<lambda>)",
      "text":"Running RestoreParameterAndBufferNames pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Running Modularize pass. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature Transform.run\n- self: <class 'torch.onnx._internal.fx.passes.modularization.Modularize'>\nFor detailed logging of graph modifications by this pass, either set `DiagnosticOptions.verbosity_level` to `logging.DEBUG` or use the environment variable `TORCH_LOGS='onnx_diagnostics'`.\n## Return values\ntorch.fx.GraphModule()",
      "text":"Running Modularize pass. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"Transform.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/_pass.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":240
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0010",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:arg0[name=l_x_]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(arg0)[placeholder]:Tensor(f32[1, 3, s1, s2])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:arg0[name=l_x_]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:l_x_[name=l_x_]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(l_x_)[placeholder]:Tensor(f32[1, 3, s1, s2])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:l_x_[name=l_x_]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:l_x_[name=l_x_]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(l_x_)[placeholder]:Tensor(f32[1, 3, s1, s2])\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:l_x_[name=l_x_]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:l_x_[name=l_x_]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(l_x_)[placeholder]:Tensor(f32[1, 3, s1, s2])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:l_x_[name=l_x_]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/conv1/weight[name=cp_resnet_conv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/conv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 74, in forward\n    x = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/conv1/weight[name=cp_resnet_conv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 3, s1, s2])`,\n`TorchScriptTensor(f32[64, 3, 7, 7])`,\n<class 'NoneType'>,\nList[length=2](\n2,\n2,\n),\nList[length=2](\n3,\n3,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_weight: `TorchScriptTensor(f32[64, 3, 7, 7])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 74, in forward\n    x = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_weight: `TorchScriptTensor(f32[64, 3, 7, 7])`,\nconvolution: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_conv1_1[name=cp_resnet_conv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_conv1_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 74, in forward\n    x = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_conv1_1[name=cp_resnet_conv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution[name=convolution]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 74, in forward\n    x = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution[name=convolution]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/bn1/weight[name=cp_resnet_bn1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/bn1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 75, in forward\n    x = self.bn1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/bn1/weight[name=cp_resnet_bn1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/bn1/bias[name=cp_resnet_bn1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/bn1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_weight: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 75, in forward\n    x = self.bn1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/bn1/bias[name=cp_resnet_bn1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/bn1/running_mean[name=cp_resnet_bn1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/bn1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_bias: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 75, in forward\n    x = self.bn1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/bn1/running_mean[name=cp_resnet_bn1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/bn1/running_var[name=cp_resnet_bn1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/bn1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_running_mean: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 75, in forward\n    x = self.bn1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/bn1/running_var[name=cp_resnet_bn1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_running_var: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 75, in forward\n    x = self.bn1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 75, in forward\n    x = self.bn1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_bn1_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_bn1_1[name=cp_resnet_bn1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_bn1_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 75, in forward\n    x = self.bn1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_bn1_1[name=cp_resnet_bn1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 75, in forward\n    x = self.bn1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 76, in forward\n    x = self.relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\nrelu: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 76, in forward\n    x = self.relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\nrelu: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncopy: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_relu_1[name=cp_resnet_relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_relu_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 76, in forward\n    x = self.relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_relu_1[name=cp_resnet_relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy[name=copy]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_pooling_MaxPool2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 76, in forward\n    x = self.relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy[name=copy]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.max_pool2d_with_indices.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.max_pool2d_with_indices.default)[call_function]:Tuple[length=2](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::max_pool2d_with_indices.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.max_pool2d_with_indices.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.max_pool2d_with_indices.default. \nONNX Node: aten_max_pool2d_with_indices[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.max_pool2d_with_indices.default)[call_function]:Tuple[length=2](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::max_pool2d_with_indices.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\nList[length=2](\n3,\n3,\n),\nList[length=2](\n2,\n2,\n),\nList[length=2](\n1,\n1,\n),\n)\n- onnx_kwargs: Dict[length=2](\ndilation: List[length=2](\n1,\n1,\n),\nceil_mode: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_max_pool2d_with_indices)`\nmatch score: -3\n## Return values\n`TracedOnnxFunction(aten_max_pool2d_with_indices)`",
      "text":"FX Node: aten.max_pool2d_with_indices.default. \nONNX Node: aten_max_pool2d_with_indices[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.max_pool2d_with_indices.default[name=max_pool2d_with_indices]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.max_pool2d_with_indices.default)[call_function]:Tuple[length=2](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_pooling_MaxPool2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 77, in forward\n    x = self.maxpool(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.max_pool2d_with_indices.default[name=max_pool2d_with_indices]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_pooling_MaxPool2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\nmax_pool2d_with_indices: Tuple[length=2](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 77, in forward\n    x = self.maxpool(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_pooling_MaxPool2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\nmax_pool2d_with_indices: Tuple[length=2](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(i64[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n),\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_pooling_MaxPool2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_pooling_MaxPool2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_pooling_MaxPool2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_maxpool_1[name=cp_resnet_maxpool_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_maxpool_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 77, in forward\n    x = self.maxpool(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_maxpool_1[name=cp_resnet_maxpool_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_3[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_3)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 77, in forward\n    x = self.maxpool(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_3[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_3[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_3)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 77, in forward\n    x = self.maxpool(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_3[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_3[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_3)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 77, in forward\n    x = self.maxpool(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_3[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/conv1/weight[name=cp_resnet_layer1_0_conv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/conv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/conv1/weight[name=cp_resnet_layer1_0_conv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[64, 64, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_conv1_weight: `TorchScriptTensor(f32[64, 64, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_conv1_weight: `TorchScriptTensor(f32[64, 64, 3, 3])`,\nconvolution_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___conv1_1[name=getattr_l__self___cp_resnet_layer1___0___conv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___0___conv1_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___conv1_1[name=getattr_l__self___cp_resnet_layer1___0___conv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_1[name=convolution_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_1)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_1[name=convolution_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/bn1/weight[name=cp_resnet_layer1_0_bn1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/bn1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/bn1/weight[name=cp_resnet_layer1_0_bn1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/bn1/bias[name=cp_resnet_layer1_0_bn1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/bn1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn1_weight: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/bn1/bias[name=cp_resnet_layer1_0_bn1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/bn1/running_mean[name=cp_resnet_layer1_0_bn1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/bn1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_bias: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/bn1/running_mean[name=cp_resnet_layer1_0_bn1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/bn1/running_var[name=cp_resnet_layer1_0_bn1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/bn1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_running_mean: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/bn1/running_var[name=cp_resnet_layer1_0_bn1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_running_var: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_1: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn1_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_1: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_5: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___bn1_1[name=getattr_l__self___cp_resnet_layer1___0___bn1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___0___bn1_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___bn1_1[name=getattr_l__self___cp_resnet_layer1___0___bn1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_5[name=getitem_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_5)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_5[name=getitem_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_5: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_5: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nrelu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_5: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nrelu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncopy_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___relu_1[name=getattr_l__self___cp_resnet_layer1___0___relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___0___relu_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___relu_1[name=getattr_l__self___cp_resnet_layer1___0___relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_1[name=copy_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_1)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_1[name=copy_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/conv2/weight[name=cp_resnet_layer1_0_conv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/conv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/conv2/weight[name=cp_resnet_layer1_0_conv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[64, 64, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_conv2_weight: `TorchScriptTensor(f32[64, 64, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_conv2_weight: `TorchScriptTensor(f32[64, 64, 3, 3])`,\nconvolution_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___conv2_1[name=getattr_l__self___cp_resnet_layer1___0___conv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___0___conv2_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___conv2_1[name=getattr_l__self___cp_resnet_layer1___0___conv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_2[name=convolution_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_2)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_2[name=convolution_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/bn2/weight[name=cp_resnet_layer1_0_bn2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/bn2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/bn2/weight[name=cp_resnet_layer1_0_bn2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/bn2/bias[name=cp_resnet_layer1_0_bn2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/bn2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn2_weight: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/bn2/bias[name=cp_resnet_layer1_0_bn2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/bn2/running_mean[name=cp_resnet_layer1_0_bn2_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/bn2/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_bias: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/bn2/running_mean[name=cp_resnet_layer1_0_bn2_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/0/bn2/running_var[name=cp_resnet_layer1_0_bn2_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/0/bn2/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_running_mean: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/0/bn2/running_var[name=cp_resnet_layer1_0_bn2_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_running_var: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_2: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_0_bn2_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_2: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_8: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___bn2_1[name=getattr_l__self___cp_resnet_layer1___0___bn2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___0___bn2_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___bn2_1[name=getattr_l__self___cp_resnet_layer1___0___bn2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___bn2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_16[name=add_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_16)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_16[name=add_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_16: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_16: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nrelu_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_16: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nrelu_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___relu_2[name=getattr_l__self___cp_resnet_layer1___0___relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___0___relu_2)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___bn2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nadd_16: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___0___relu_2[name=getattr_l__self___cp_resnet_layer1___0___relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___conv2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___bn2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nadd_16: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___0___relu_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: resnet_BasicBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: resnet_BasicBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer1_0_1[name=cp_resnet_layer1_0_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer1_0_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer1_0_1[name=cp_resnet_layer1_0_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_2[name=copy_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_2)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_2[name=copy_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_2[name=copy_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_2)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_2[name=copy_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/conv1/weight[name=cp_resnet_layer1_1_conv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/conv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/conv1/weight[name=cp_resnet_layer1_1_conv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[64, 64, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_conv1_weight: `TorchScriptTensor(f32[64, 64, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_conv1_weight: `TorchScriptTensor(f32[64, 64, 3, 3])`,\nconvolution_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___conv1_1[name=getattr_l__self___cp_resnet_layer1___1___conv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___1___conv1_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___conv1_1[name=getattr_l__self___cp_resnet_layer1___1___conv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_3[name=convolution_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_3)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_3[name=convolution_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/bn1/weight[name=cp_resnet_layer1_1_bn1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/bn1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/bn1/weight[name=cp_resnet_layer1_1_bn1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/bn1/bias[name=cp_resnet_layer1_1_bn1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/bn1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn1_weight: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/bn1/bias[name=cp_resnet_layer1_1_bn1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/bn1/running_mean[name=cp_resnet_layer1_1_bn1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/bn1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_bias: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/bn1/running_mean[name=cp_resnet_layer1_1_bn1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/bn1/running_var[name=cp_resnet_layer1_1_bn1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/bn1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_running_mean: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/bn1/running_var[name=cp_resnet_layer1_1_bn1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_running_var: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_3: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn1_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn1_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_3: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_11: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___bn1_1[name=getattr_l__self___cp_resnet_layer1___1___bn1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___1___bn1_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___bn1_1[name=getattr_l__self___cp_resnet_layer1___1___bn1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_11[name=getitem_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_11)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_11[name=getitem_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_11: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_11: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nrelu_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_11: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nrelu_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncopy_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___relu_1[name=getattr_l__self___cp_resnet_layer1___1___relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___1___relu_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___relu_1[name=getattr_l__self___cp_resnet_layer1___1___relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_3[name=copy_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_3)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_3[name=copy_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/conv2/weight[name=cp_resnet_layer1_1_conv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/conv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/conv2/weight[name=cp_resnet_layer1_1_conv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[64, 64, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_conv2_weight: `TorchScriptTensor(f32[64, 64, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_conv2_weight: `TorchScriptTensor(f32[64, 64, 3, 3])`,\nconvolution_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___conv2_1[name=getattr_l__self___cp_resnet_layer1___1___conv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___1___conv2_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___conv2_1[name=getattr_l__self___cp_resnet_layer1___1___conv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_4[name=convolution_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_4)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_4[name=convolution_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/bn2/weight[name=cp_resnet_layer1_1_bn2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/bn2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/bn2/weight[name=cp_resnet_layer1_1_bn2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/bn2/bias[name=cp_resnet_layer1_1_bn2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/bn2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn2_weight: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/bn2/bias[name=cp_resnet_layer1_1_bn2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/bn2/running_mean[name=cp_resnet_layer1_1_bn2_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/bn2/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_bias: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/bn2/running_mean[name=cp_resnet_layer1_1_bn2_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer1/1/bn2/running_var[name=cp_resnet_layer1_1_bn2_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer1/1/bn2/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_running_mean: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer1/1/bn2/running_var[name=cp_resnet_layer1_1_bn2_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_running_var: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_4: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_bn2_weight: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_bias: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_running_mean: `TorchScriptTensor(f32[64])`,\ncp_resnet_layer1_1_bn2_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_4: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_14: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___bn2_1[name=getattr_l__self___cp_resnet_layer1___1___bn2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___1___bn2_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___bn2_1[name=getattr_l__self___cp_resnet_layer1___1___bn2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_33]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___bn2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_33]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_33[name=add_33]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_33)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_33[name=add_33]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_33: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_33: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nrelu_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_33: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nrelu_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___relu_2[name=getattr_l__self___cp_resnet_layer1___1___relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer1___1___relu_2)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___bn2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nadd_33: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer1___1___relu_2[name=getattr_l__self___cp_resnet_layer1___1___relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ncopy_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___conv2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___bn2_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\nadd_33: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer1___1___relu_2: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: resnet_BasicBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: resnet_BasicBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer1_1_1[name=cp_resnet_layer1_1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer1_1_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer1_1_1[name=cp_resnet_layer1_1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_3: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_0_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_container_Sequential. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_container_Sequential. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer1_1[name=cp_resnet_layer1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer1_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer1_1[name=cp_resnet_layer1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_4[name=copy_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_4)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_4[name=copy_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_4[name=copy_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_4)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_4[name=copy_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_4[name=copy_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_4)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_4[name=copy_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/conv1/weight[name=cp_resnet_layer2_0_conv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/conv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/conv1/weight[name=cp_resnet_layer2_0_conv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[128, 64, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n2,\n2,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_0_conv1_weight: `TorchScriptTensor(f32[128, 64, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_0_conv1_weight: `TorchScriptTensor(f32[128, 64, 3, 3])`,\nconvolution_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___conv1_1[name=getattr_l__self___cp_resnet_layer2___0___conv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___0___conv1_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___conv1_1[name=getattr_l__self___cp_resnet_layer2___0___conv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_5[name=convolution_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_5)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_5[name=convolution_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/bn1/weight[name=cp_resnet_layer2_0_bn1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/bn1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/bn1/weight[name=cp_resnet_layer2_0_bn1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/bn1/bias[name=cp_resnet_layer2_0_bn1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/bn1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn1_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/bn1/bias[name=cp_resnet_layer2_0_bn1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/bn1/running_mean[name=cp_resnet_layer2_0_bn1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/bn1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/bn1/running_mean[name=cp_resnet_layer2_0_bn1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/bn1/running_var[name=cp_resnet_layer2_0_bn1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/bn1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/bn1/running_var[name=cp_resnet_layer2_0_bn1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_17]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_5: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_17]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn1_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_5: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_17: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___bn1_1[name=getattr_l__self___cp_resnet_layer2___0___bn1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___0___bn1_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___bn1_1[name=getattr_l__self___cp_resnet_layer2___0___bn1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_17[name=getitem_17]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_17)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_17[name=getitem_17]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_17: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_17: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_17: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncopy_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___relu_1[name=getattr_l__self___cp_resnet_layer2___0___relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___0___relu_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___relu_1[name=getattr_l__self___cp_resnet_layer2___0___relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_5[name=copy_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_5)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_5[name=copy_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/conv2/weight[name=cp_resnet_layer2_0_conv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/conv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/conv2/weight[name=cp_resnet_layer2_0_conv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 128, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_conv2_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_conv2_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\nconvolution_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___conv2_1[name=getattr_l__self___cp_resnet_layer2___0___conv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___0___conv2_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___conv2_1[name=getattr_l__self___cp_resnet_layer2___0___conv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_6[name=convolution_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_6)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_6[name=convolution_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/bn2/weight[name=cp_resnet_layer2_0_bn2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/bn2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/bn2/weight[name=cp_resnet_layer2_0_bn2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/bn2/bias[name=cp_resnet_layer2_0_bn2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/bn2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn2_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/bn2/bias[name=cp_resnet_layer2_0_bn2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/bn2/running_mean[name=cp_resnet_layer2_0_bn2_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/bn2/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/bn2/running_mean[name=cp_resnet_layer2_0_bn2_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/bn2/running_var[name=cp_resnet_layer2_0_bn2_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/bn2/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/bn2/running_var[name=cp_resnet_layer2_0_bn2_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_20]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_6: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_20]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_bn2_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_6: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_20: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___bn2_1[name=getattr_l__self___cp_resnet_layer2___0___bn2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___0___bn2_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___bn2_1[name=getattr_l__self___cp_resnet_layer2___0___bn2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_4[name=copy_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_4)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_4[name=copy_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_4[name=copy_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_4)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 79, in forward\n    x = self.layer1(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_4[name=copy_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/downsample/0/weight[name=cp_resnet_layer2_0_downsample_0_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/downsample/0/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/downsample/0/weight[name=cp_resnet_layer2_0_downsample_0_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n`TorchScriptTensor(f32[128, 64, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n2,\n2,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_0_downsample_0_weight: `TorchScriptTensor(f32[128, 64, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_0_downsample_0_weight: `TorchScriptTensor(f32[128, 64, 1, 1])`,\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___downsample_0_1[name=getattr_l__self___cp_resnet_layer2___0___downsample_0_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___0___downsample_0_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___downsample_0_1[name=getattr_l__self___cp_resnet_layer2___0___downsample_0_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_7[name=convolution_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_7)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_7[name=convolution_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/downsample/1/weight[name=cp_resnet_layer2_0_downsample_1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/downsample/1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/downsample/1/weight[name=cp_resnet_layer2_0_downsample_1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/downsample/1/bias[name=cp_resnet_layer2_0_downsample_1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/downsample/1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_downsample_1_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/downsample/1/bias[name=cp_resnet_layer2_0_downsample_1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/downsample/1/running_mean[name=cp_resnet_layer2_0_downsample_1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/downsample/1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_downsample_1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/downsample/1/running_mean[name=cp_resnet_layer2_0_downsample_1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/0/downsample/1/running_var[name=cp_resnet_layer2_0_downsample_1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/0/downsample/1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_downsample_1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/0/downsample/1/running_var[name=cp_resnet_layer2_0_downsample_1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_downsample_1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_23]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_downsample_1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_7: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_23]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_0_downsample_1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_0_downsample_1_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_7: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_23: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___downsample_1_1[name=getattr_l__self___cp_resnet_layer2___0___downsample_1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___0___downsample_1_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_0_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___downsample_1_1[name=getattr_l__self___cp_resnet_layer2___0___downsample_1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_0_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_container_Sequential. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_container_Sequential. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___downsample_1[name=getattr_l__self___cp_resnet_layer2___0___downsample_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___0___downsample_1)[call_module]:Tuple[length=2](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___downsample_1[name=getattr_l__self___cp_resnet_layer2___0___downsample_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_50]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_50]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_50[name=add_50]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_50)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_50[name=add_50]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_7[name=convolution_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_7)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_7[name=convolution_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//8) + 1)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//8) + 1)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_sym_size)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_sym_size)`",
      "text":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//8) + 1)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//8) + 1)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n3,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_sym_size)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_sym_size)`",
      "text":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nsym_size_int_10: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nsym_size_int_10: `TorchScriptTensor(i64[1])`,\nsym_size_int_11: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconvolution_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nsym_size_int_10: `TorchScriptTensor(i64[1])`,\nsym_size_int_11: `TorchScriptTensor(i64[1])`,\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___relu_2[name=getattr_l__self___cp_resnet_layer2___0___relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___0___relu_2)[call_module]:Tuple[length=3](\nSymInt(((s1 - 1)//8) + 1),\nSymInt(((s2 - 1)//8) + 1),\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___0___relu_2[name=getattr_l__self___cp_resnet_layer2___0___relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s1 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s2 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=12](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=13](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=14](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nadd_50: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: resnet_BasicBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: resnet_BasicBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer2_0_1[name=cp_resnet_layer2_0_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer2_0_1)[call_module]:Tuple[length=3](\nSymInt(((s1 - 1)//8) + 1),\nSymInt(((s2 - 1)//8) + 1),\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer2_0_1[name=cp_resnet_layer2_0_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s1 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s2 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_6[name=copy_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_6)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_6[name=copy_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_6[name=copy_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_6)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_6[name=copy_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/conv1/weight[name=cp_resnet_layer2_1_conv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/conv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/conv1/weight[name=cp_resnet_layer2_1_conv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 128, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_conv1_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_conv1_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\nconvolution_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___conv1_1[name=getattr_l__self___cp_resnet_layer2___1___conv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___1___conv1_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___conv1_1[name=getattr_l__self___cp_resnet_layer2___1___conv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_8[name=convolution_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_8[name=convolution_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/bn1/weight[name=cp_resnet_layer2_1_bn1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/bn1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/bn1/weight[name=cp_resnet_layer2_1_bn1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/bn1/bias[name=cp_resnet_layer2_1_bn1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/bn1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn1_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/bn1/bias[name=cp_resnet_layer2_1_bn1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/bn1/running_mean[name=cp_resnet_layer2_1_bn1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/bn1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/bn1/running_mean[name=cp_resnet_layer2_1_bn1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/bn1/running_var[name=cp_resnet_layer2_1_bn1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/bn1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/bn1/running_var[name=cp_resnet_layer2_1_bn1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_26]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_8: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_26]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn1_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn1_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_8: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___bn1_1[name=getattr_l__self___cp_resnet_layer2___1___bn1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___1___bn1_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___bn1_1[name=getattr_l__self___cp_resnet_layer2___1___bn1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_26[name=getitem_26]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_26)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_26[name=getitem_26]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncopy_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___relu_1[name=getattr_l__self___cp_resnet_layer2___1___relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___1___relu_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___relu_1[name=getattr_l__self___cp_resnet_layer2___1___relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_7[name=copy_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_7)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_7[name=copy_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/conv2/weight[name=cp_resnet_layer2_1_conv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/conv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/conv2/weight[name=cp_resnet_layer2_1_conv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 128, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_conv2_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_conv2_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\nconvolution_9: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___conv2_1[name=getattr_l__self___cp_resnet_layer2___1___conv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___1___conv2_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___conv2_1[name=getattr_l__self___cp_resnet_layer2___1___conv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_9[name=convolution_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_9)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_9[name=convolution_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/bn2/weight[name=cp_resnet_layer2_1_bn2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/bn2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_9: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/bn2/weight[name=cp_resnet_layer2_1_bn2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/bn2/bias[name=cp_resnet_layer2_1_bn2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/bn2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_9: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn2_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/bn2/bias[name=cp_resnet_layer2_1_bn2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/bn2/running_mean[name=cp_resnet_layer2_1_bn2_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/bn2/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_9: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/bn2/running_mean[name=cp_resnet_layer2_1_bn2_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer2/1/bn2/running_var[name=cp_resnet_layer2_1_bn2_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer2/1/bn2/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_9: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer2/1/bn2/running_var[name=cp_resnet_layer2_1_bn2_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_9: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_29]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_9: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_9: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_29]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_9: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_bn2_weight: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_bias: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_running_mean: `TorchScriptTensor(f32[128])`,\ncp_resnet_layer2_1_bn2_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_9: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_29: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___bn2_1[name=getattr_l__self___cp_resnet_layer2___1___bn2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___1___bn2_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___bn2_1[name=getattr_l__self___cp_resnet_layer2___1___bn2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_67]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_67]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_67[name=add_67]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_67)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_67[name=add_67]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_67: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_67: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_67: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nrelu_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___relu_2[name=getattr_l__self___cp_resnet_layer2___1___relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer2___1___relu_2)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nadd_67: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer2___1___relu_2[name=getattr_l__self___cp_resnet_layer2___1___relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ncopy_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___bn1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___conv2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___bn2_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nadd_67: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer2___1___relu_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: resnet_BasicBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: resnet_BasicBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer2_1_1[name=cp_resnet_layer2_1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer2_1_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer2_1_1[name=cp_resnet_layer2_1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_4: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer2_1_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_container_Sequential. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_container_Sequential. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer2_1[name=cp_resnet_layer2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer2_1)[call_module]:Tuple[length=3](\nSymInt(((s1 - 1)//8) + 1),\nSymInt(((s2 - 1)//8) + 1),\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer2_1[name=cp_resnet_layer2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s1 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s2 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_8[name=copy_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_8[name=copy_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_8[name=copy_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_8[name=copy_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_8[name=copy_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_8[name=copy_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/conv1/weight[name=cp_resnet_layer3_0_conv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/conv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/conv1/weight[name=cp_resnet_layer3_0_conv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[256, 128, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n2,\n2,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer3_0_conv1_weight: `TorchScriptTensor(f32[256, 128, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer3_0_conv1_weight: `TorchScriptTensor(f32[256, 128, 3, 3])`,\nconvolution_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___conv1_1[name=getattr_l__self___cp_resnet_layer3___0___conv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___0___conv1_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___conv1_1[name=getattr_l__self___cp_resnet_layer3___0___conv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_10[name=convolution_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_10)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_10[name=convolution_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/bn1/weight[name=cp_resnet_layer3_0_bn1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/bn1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/bn1/weight[name=cp_resnet_layer3_0_bn1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/bn1/bias[name=cp_resnet_layer3_0_bn1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/bn1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn1_weight: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/bn1/bias[name=cp_resnet_layer3_0_bn1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/bn1/running_mean[name=cp_resnet_layer3_0_bn1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/bn1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_bias: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/bn1/running_mean[name=cp_resnet_layer3_0_bn1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/bn1/running_var[name=cp_resnet_layer3_0_bn1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/bn1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_running_mean: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/bn1/running_var[name=cp_resnet_layer3_0_bn1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_running_var: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_32]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_10: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_32]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn1_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_10: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_32: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___bn1_1[name=getattr_l__self___cp_resnet_layer3___0___bn1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___0___bn1_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___bn1_1[name=getattr_l__self___cp_resnet_layer3___0___bn1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_32[name=getitem_32]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_32)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_32[name=getitem_32]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_32: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_32: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_9: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_32: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_9: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncopy_9: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___relu_1[name=getattr_l__self___cp_resnet_layer3___0___relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___0___relu_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___relu_1[name=getattr_l__self___cp_resnet_layer3___0___relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_9[name=copy_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_9)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_9[name=copy_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/conv2/weight[name=cp_resnet_layer3_0_conv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/conv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_9: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/conv2/weight[name=cp_resnet_layer3_0_conv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[256, 256, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_9: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_conv2_weight: `TorchScriptTensor(f32[256, 256, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_9: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_conv2_weight: `TorchScriptTensor(f32[256, 256, 3, 3])`,\nconvolution_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___conv2_1[name=getattr_l__self___cp_resnet_layer3___0___conv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___0___conv2_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___conv2_1[name=getattr_l__self___cp_resnet_layer3___0___conv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_11[name=convolution_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_11)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_11[name=convolution_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/bn2/weight[name=cp_resnet_layer3_0_bn2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/bn2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/bn2/weight[name=cp_resnet_layer3_0_bn2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/bn2/bias[name=cp_resnet_layer3_0_bn2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/bn2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn2_weight: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/bn2/bias[name=cp_resnet_layer3_0_bn2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/bn2/running_mean[name=cp_resnet_layer3_0_bn2_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/bn2/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_bias: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/bn2/running_mean[name=cp_resnet_layer3_0_bn2_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/bn2/running_var[name=cp_resnet_layer3_0_bn2_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/bn2/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_running_mean: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/bn2/running_var[name=cp_resnet_layer3_0_bn2_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_running_var: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_35]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_11: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_35]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_bn2_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_11: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_35: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___bn2_1[name=getattr_l__self___cp_resnet_layer3___0___bn2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___0___bn2_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___bn2_1[name=getattr_l__self___cp_resnet_layer3___0___bn2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_8[name=copy_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_8[name=copy_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_8[name=copy_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_8[name=copy_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/downsample/0/weight[name=cp_resnet_layer3_0_downsample_0_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/downsample/0/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/downsample/0/weight[name=cp_resnet_layer3_0_downsample_0_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[256, 128, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n2,\n2,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer3_0_downsample_0_weight: `TorchScriptTensor(f32[256, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer3_0_downsample_0_weight: `TorchScriptTensor(f32[256, 128, 1, 1])`,\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___downsample_0_1[name=getattr_l__self___cp_resnet_layer3___0___downsample_0_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___0___downsample_0_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___downsample_0_1[name=getattr_l__self___cp_resnet_layer3___0___downsample_0_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_12[name=convolution_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_12[name=convolution_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/downsample/1/weight[name=cp_resnet_layer3_0_downsample_1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/downsample/1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/downsample/1/weight[name=cp_resnet_layer3_0_downsample_1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/downsample/1/bias[name=cp_resnet_layer3_0_downsample_1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/downsample/1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_downsample_1_weight: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/downsample/1/bias[name=cp_resnet_layer3_0_downsample_1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/downsample/1/running_mean[name=cp_resnet_layer3_0_downsample_1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/downsample/1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_downsample_1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_bias: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/downsample/1/running_mean[name=cp_resnet_layer3_0_downsample_1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/0/downsample/1/running_var[name=cp_resnet_layer3_0_downsample_1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/0/downsample/1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_downsample_1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_running_mean: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/0/downsample/1/running_var[name=cp_resnet_layer3_0_downsample_1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_downsample_1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_running_var: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_38]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_downsample_1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_12: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_38]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_0_downsample_1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_0_downsample_1_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_12: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_38: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___downsample_1_1[name=getattr_l__self___cp_resnet_layer3___0___downsample_1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___0___downsample_1_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_0_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___downsample_1_1[name=getattr_l__self___cp_resnet_layer3___0___downsample_1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_0_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_container_Sequential. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_container_Sequential. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___downsample_1[name=getattr_l__self___cp_resnet_layer3___0___downsample_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___0___downsample_1)[call_module]:Tuple[length=2](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___downsample_1[name=getattr_l__self___cp_resnet_layer3___0___downsample_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_84]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_84]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_84[name=add_84]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_84)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_84[name=add_84]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_12[name=convolution_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_12[name=convolution_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//16) + 1)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//16) + 1)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_sym_size)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_sym_size)`",
      "text":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s1 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//16) + 1)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//16) + 1)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n3,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_sym_size)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_sym_size)`",
      "text":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_17]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(((s2 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nsym_size_int_16: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_17]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nsym_size_int_16: `TorchScriptTensor(i64[1])`,\nsym_size_int_17: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconvolution_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nsym_size_int_16: `TorchScriptTensor(i64[1])`,\nsym_size_int_17: `TorchScriptTensor(i64[1])`,\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___relu_2[name=getattr_l__self___cp_resnet_layer3___0___relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___0___relu_2)[call_module]:Tuple[length=3](\nSymInt(((s1 - 1)//16) + 1),\nSymInt(((s2 - 1)//16) + 1),\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___0___relu_2[name=getattr_l__self___cp_resnet_layer3___0___relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s1 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s2 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=12](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=13](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=14](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___0___downsample_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nadd_84: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: resnet_BasicBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: resnet_BasicBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer3_0_1[name=cp_resnet_layer3_0_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer3_0_1)[call_module]:Tuple[length=3](\nSymInt(((s1 - 1)//16) + 1),\nSymInt(((s2 - 1)//16) + 1),\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer3_0_1[name=cp_resnet_layer3_0_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s1 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer3_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s2 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer3_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer3_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_10[name=copy_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_10)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_10[name=copy_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_10[name=copy_10]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_10)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_10[name=copy_10]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/conv1/weight[name=cp_resnet_layer3_1_conv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/conv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/conv1/weight[name=cp_resnet_layer3_1_conv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[256, 256, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_conv1_weight: `TorchScriptTensor(f32[256, 256, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_conv1_weight: `TorchScriptTensor(f32[256, 256, 3, 3])`,\nconvolution_13: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___conv1_1[name=getattr_l__self___cp_resnet_layer3___1___conv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___1___conv1_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___conv1_1[name=getattr_l__self___cp_resnet_layer3___1___conv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_13[name=convolution_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_13)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_13[name=convolution_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/bn1/weight[name=cp_resnet_layer3_1_bn1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/bn1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_13: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/bn1/weight[name=cp_resnet_layer3_1_bn1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/bn1/bias[name=cp_resnet_layer3_1_bn1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/bn1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_13: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn1_weight: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/bn1/bias[name=cp_resnet_layer3_1_bn1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/bn1/running_mean[name=cp_resnet_layer3_1_bn1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/bn1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_13: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_bias: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/bn1/running_mean[name=cp_resnet_layer3_1_bn1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/bn1/running_var[name=cp_resnet_layer3_1_bn1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/bn1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_13: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_running_mean: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/bn1/running_var[name=cp_resnet_layer3_1_bn1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_13: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_running_var: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_41]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_13: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_13: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_41]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_13: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn1_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn1_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_13: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_41: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___bn1_1[name=getattr_l__self___cp_resnet_layer3___1___bn1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___1___bn1_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___bn1_1[name=getattr_l__self___cp_resnet_layer3___1___bn1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_41[name=getitem_41]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_41)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_41[name=getitem_41]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_41: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_41: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_41: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncopy_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___relu_1[name=getattr_l__self___cp_resnet_layer3___1___relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___1___relu_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___relu_1[name=getattr_l__self___cp_resnet_layer3___1___relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_11[name=copy_11]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_11)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_11[name=copy_11]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/conv2/weight[name=cp_resnet_layer3_1_conv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/conv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/conv2/weight[name=cp_resnet_layer3_1_conv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[256, 256, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_conv2_weight: `TorchScriptTensor(f32[256, 256, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_11: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_conv2_weight: `TorchScriptTensor(f32[256, 256, 3, 3])`,\nconvolution_14: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___conv2_1[name=getattr_l__self___cp_resnet_layer3___1___conv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___1___conv2_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___conv2_1[name=getattr_l__self___cp_resnet_layer3___1___conv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_14[name=convolution_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_14)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_14[name=convolution_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/bn2/weight[name=cp_resnet_layer3_1_bn2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/bn2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_14: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/bn2/weight[name=cp_resnet_layer3_1_bn2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/bn2/bias[name=cp_resnet_layer3_1_bn2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/bn2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_14: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn2_weight: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/bn2/bias[name=cp_resnet_layer3_1_bn2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/bn2/running_mean[name=cp_resnet_layer3_1_bn2_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/bn2/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_14: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_bias: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/bn2/running_mean[name=cp_resnet_layer3_1_bn2_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer3/1/bn2/running_var[name=cp_resnet_layer3_1_bn2_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer3/1/bn2/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_14: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_running_mean: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer3/1/bn2/running_var[name=cp_resnet_layer3_1_bn2_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n`TorchScriptTensor(f32[256])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_14: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_running_var: `TorchScriptTensor(f32[256])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_44]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_14: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_14: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_44]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_14: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_bn2_weight: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_bias: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_running_mean: `TorchScriptTensor(f32[256])`,\ncp_resnet_layer3_1_bn2_running_var: `TorchScriptTensor(f32[256])`,\n_native_batch_norm_legit_no_training_14: Tuple[length=3](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_44: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___bn2_1[name=getattr_l__self___cp_resnet_layer3___1___bn2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___1___bn2_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___bn2_1[name=getattr_l__self___cp_resnet_layer3___1___bn2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_101]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_101]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_101[name=add_101]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_101)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_101[name=add_101]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_101: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_101: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_101: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nrelu_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___relu_2[name=getattr_l__self___cp_resnet_layer3___1___relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer3___1___relu_2)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nadd_101: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer3___1___relu_2[name=getattr_l__self___cp_resnet_layer3___1___relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ncopy_10: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___bn1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___relu_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___conv2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___bn2_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nadd_101: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer3___1___relu_2: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: resnet_BasicBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: resnet_BasicBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer3_1_1[name=cp_resnet_layer3_1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer3_1_1)[call_module]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer3_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer3_1_1[name=cp_resnet_layer3_1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_resnet_layer3_0_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer3_1_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_container_Sequential. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_container_Sequential. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer3_1[name=cp_resnet_layer3_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer3_1)[call_module]:Tuple[length=3](\nSymInt(((s1 - 1)//16) + 1),\nSymInt(((s2 - 1)//16) + 1),\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer3_1[name=cp_resnet_layer3_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s1 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s2 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=12](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=13](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_12[name=copy_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_12[name=copy_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_12[name=copy_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_12[name=copy_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_12[name=copy_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_12[name=copy_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/conv1/weight[name=cp_resnet_layer4_0_conv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/conv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/conv1/weight[name=cp_resnet_layer4_0_conv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[512, 256, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n2,\n2,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer4_0_conv1_weight: `TorchScriptTensor(f32[512, 256, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer4_0_conv1_weight: `TorchScriptTensor(f32[512, 256, 3, 3])`,\nconvolution_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___conv1_1[name=getattr_l__self___cp_resnet_layer4___0___conv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___0___conv1_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___conv1_1[name=getattr_l__self___cp_resnet_layer4___0___conv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_15[name=convolution_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_15)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_15[name=convolution_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/bn1/weight[name=cp_resnet_layer4_0_bn1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/bn1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/bn1/weight[name=cp_resnet_layer4_0_bn1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/bn1/bias[name=cp_resnet_layer4_0_bn1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/bn1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn1_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/bn1/bias[name=cp_resnet_layer4_0_bn1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/bn1/running_mean[name=cp_resnet_layer4_0_bn1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/bn1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/bn1/running_mean[name=cp_resnet_layer4_0_bn1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/bn1/running_var[name=cp_resnet_layer4_0_bn1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/bn1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_running_mean: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/bn1/running_var[name=cp_resnet_layer4_0_bn1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_running_var: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_47]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_15: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_47]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn1_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_15: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_47: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___bn1_1[name=getattr_l__self___cp_resnet_layer4___0___bn1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___0___bn1_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___bn1_1[name=getattr_l__self___cp_resnet_layer4___0___bn1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_47[name=getitem_47]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_47)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_47[name=getitem_47]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_47: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_47: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nrelu_13: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_47: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nrelu_13: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncopy_13: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___relu_1[name=getattr_l__self___cp_resnet_layer4___0___relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___0___relu_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___relu_1[name=getattr_l__self___cp_resnet_layer4___0___relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_13[name=copy_13]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_13)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_13[name=copy_13]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/conv2/weight[name=cp_resnet_layer4_0_conv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/conv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_13: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/conv2/weight[name=cp_resnet_layer4_0_conv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[512, 512, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_13: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_conv2_weight: `TorchScriptTensor(f32[512, 512, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_13: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_conv2_weight: `TorchScriptTensor(f32[512, 512, 3, 3])`,\nconvolution_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___conv2_1[name=getattr_l__self___cp_resnet_layer4___0___conv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___0___conv2_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___conv2_1[name=getattr_l__self___cp_resnet_layer4___0___conv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_16[name=convolution_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_16)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_16[name=convolution_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/bn2/weight[name=cp_resnet_layer4_0_bn2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/bn2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/bn2/weight[name=cp_resnet_layer4_0_bn2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/bn2/bias[name=cp_resnet_layer4_0_bn2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/bn2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn2_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/bn2/bias[name=cp_resnet_layer4_0_bn2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/bn2/running_mean[name=cp_resnet_layer4_0_bn2_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/bn2/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/bn2/running_mean[name=cp_resnet_layer4_0_bn2_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/bn2/running_var[name=cp_resnet_layer4_0_bn2_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/bn2/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_running_mean: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/bn2/running_var[name=cp_resnet_layer4_0_bn2_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_running_var: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_50]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_16: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_50]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_bn2_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_16: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_50: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___bn2_1[name=getattr_l__self___cp_resnet_layer4___0___bn2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___0___bn2_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___bn2_1[name=getattr_l__self___cp_resnet_layer4___0___bn2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_12[name=copy_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_12[name=copy_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_12[name=copy_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_12[name=copy_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/downsample/0/weight[name=cp_resnet_layer4_0_downsample_0_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/downsample/0/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/downsample/0/weight[name=cp_resnet_layer4_0_downsample_0_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[512, 256, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n2,\n2,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_17]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer4_0_downsample_0_weight: `TorchScriptTensor(f32[512, 256, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_17]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer4_0_downsample_0_weight: `TorchScriptTensor(f32[512, 256, 1, 1])`,\nconvolution_17: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___downsample_0_1[name=getattr_l__self___cp_resnet_layer4___0___downsample_0_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___0___downsample_0_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___downsample_0_1[name=getattr_l__self___cp_resnet_layer4___0___downsample_0_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_17[name=convolution_17]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_17)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_17[name=convolution_17]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/downsample/1/weight[name=cp_resnet_layer4_0_downsample_1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/downsample/1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_17: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/downsample/1/weight[name=cp_resnet_layer4_0_downsample_1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/downsample/1/bias[name=cp_resnet_layer4_0_downsample_1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/downsample/1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_17: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_downsample_1_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/downsample/1/bias[name=cp_resnet_layer4_0_downsample_1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/downsample/1/running_mean[name=cp_resnet_layer4_0_downsample_1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/downsample/1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_17: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_downsample_1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/downsample/1/running_mean[name=cp_resnet_layer4_0_downsample_1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/0/downsample/1/running_var[name=cp_resnet_layer4_0_downsample_1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/0/downsample/1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_17: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_downsample_1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_running_mean: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/0/downsample/1/running_var[name=cp_resnet_layer4_0_downsample_1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_17]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_17: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_downsample_1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_running_var: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_17]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_53]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_17: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_downsample_1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_17: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_53]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_17: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_0_downsample_1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_0_downsample_1_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_17: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_53: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___downsample_1_1[name=getattr_l__self___cp_resnet_layer4___0___downsample_1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___0___downsample_1_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___downsample_0_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___downsample_1_1[name=getattr_l__self___cp_resnet_layer4___0___downsample_1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___downsample_0_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___downsample_1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_container_Sequential. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_container_Sequential. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___downsample_1[name=getattr_l__self___cp_resnet_layer4___0___downsample_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___0___downsample_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 45, in forward\n    shortcut = self.downsample(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___downsample_1[name=getattr_l__self___cp_resnet_layer4___0___downsample_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_118]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___downsample_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_118]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_118[name=add_118]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_118)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_118[name=add_118]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_118: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_118: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nrelu_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_118: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nrelu_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___relu_2[name=getattr_l__self___cp_resnet_layer4___0___relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___0___relu_2)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___downsample_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nadd_118: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___0___relu_2[name=getattr_l__self___cp_resnet_layer4___0___relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___conv2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___bn2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___downsample_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nadd_118: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___0___relu_2: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: resnet_BasicBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: resnet_BasicBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer4_0_1[name=cp_resnet_layer4_0_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer4_0_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer4_0_1[name=cp_resnet_layer4_0_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_14[name=copy_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_14)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_14[name=copy_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_14[name=copy_14]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_14)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_14[name=copy_14]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/conv1/weight[name=cp_resnet_layer4_1_conv1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/conv1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/conv1/weight[name=cp_resnet_layer4_1_conv1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[512, 512, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_18]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_conv1_weight: `TorchScriptTensor(f32[512, 512, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_18]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_conv1_weight: `TorchScriptTensor(f32[512, 512, 3, 3])`,\nconvolution_18: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___conv1_1[name=getattr_l__self___cp_resnet_layer4___1___conv1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___1___conv1_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___conv1_1[name=getattr_l__self___cp_resnet_layer4___1___conv1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_18[name=convolution_18]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_18)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_18[name=convolution_18]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/bn1/weight[name=cp_resnet_layer4_1_bn1_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/bn1/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_18: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/bn1/weight[name=cp_resnet_layer4_1_bn1_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/bn1/bias[name=cp_resnet_layer4_1_bn1_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/bn1/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_18: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn1_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/bn1/bias[name=cp_resnet_layer4_1_bn1_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/bn1/running_mean[name=cp_resnet_layer4_1_bn1_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/bn1/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_18: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/bn1/running_mean[name=cp_resnet_layer4_1_bn1_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/bn1/running_var[name=cp_resnet_layer4_1_bn1_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/bn1/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_18: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_running_mean: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/bn1/running_var[name=cp_resnet_layer4_1_bn1_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_18]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_18: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_running_var: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_18]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_56]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_18: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_18: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_56]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_18: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn1_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn1_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_18: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_56: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___bn1_1[name=getattr_l__self___cp_resnet_layer4___1___bn1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___1___bn1_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___bn1_1[name=getattr_l__self___cp_resnet_layer4___1___bn1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_56[name=getitem_56]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_56)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 38, in forward\n    residual = self.bn1(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_56[name=getitem_56]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_56: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_56: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nrelu_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ngetitem_56: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nrelu_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncopy_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___relu_1[name=getattr_l__self___cp_resnet_layer4___1___relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___1___relu_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___relu_1[name=getattr_l__self___cp_resnet_layer4___1___relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_15[name=copy_15]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_15)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 39, in forward\n    residual = self.relu(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_15[name=copy_15]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/conv2/weight[name=cp_resnet_layer4_1_conv2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/conv2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/conv2/weight[name=cp_resnet_layer4_1_conv2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[512, 512, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_19]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_conv2_weight: `TorchScriptTensor(f32[512, 512, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_19]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_15: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_conv2_weight: `TorchScriptTensor(f32[512, 512, 3, 3])`,\nconvolution_19: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___conv2_1[name=getattr_l__self___cp_resnet_layer4___1___conv2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___1___conv2_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___conv2_1[name=getattr_l__self___cp_resnet_layer4___1___conv2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_19[name=convolution_19]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_19)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 40, in forward\n    residual = self.conv2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_19[name=convolution_19]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/bn2/weight[name=cp_resnet_layer4_1_bn2_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/bn2/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_19: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/bn2/weight[name=cp_resnet_layer4_1_bn2_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/bn2/bias[name=cp_resnet_layer4_1_bn2_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/bn2/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_19: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn2_weight: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/bn2/bias[name=cp_resnet_layer4_1_bn2_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/bn2/running_mean[name=cp_resnet_layer4_1_bn2_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/bn2/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_19: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_bias: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/bn2/running_mean[name=cp_resnet_layer4_1_bn2_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/resnet/layer4/1/bn2/running_var[name=cp_resnet_layer4_1_bn2_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/resnet/layer4/1/bn2/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_19: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_running_mean: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/resnet/layer4/1/bn2/running_var[name=cp_resnet_layer4_1_bn2_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n`TorchScriptTensor(f32[512])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_19]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_19: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_running_var: `TorchScriptTensor(f32[512])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_19]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_59]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_19: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_19: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_59]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_19: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_bn2_weight: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_bias: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_running_mean: `TorchScriptTensor(f32[512])`,\ncp_resnet_layer4_1_bn2_running_var: `TorchScriptTensor(f32[512])`,\n_native_batch_norm_legit_no_training_19: Tuple[length=3](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_59: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___bn2_1[name=getattr_l__self___cp_resnet_layer4___1___bn2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___1___bn2_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 41, in forward\n    residual = self.bn2(residual)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___bn2_1[name=getattr_l__self___cp_resnet_layer4___1___bn2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.add.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::add.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nalpha: 1,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_logical_or)`\n### Failed: attribute mismatch!\nActual {'alpha'} vs expected set()\nThe function is not a nearest match candidate.\n## Checking perfect match...\n`TracedOnnxFunction(aten_add)`\n### Failed: attribute 'alpha' type mismatch!\nActual <class 'int'> vs\nExpected AttrType.FLOAT\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_add)`",
      "text":"FX Node: aten.add.Tensor. \nONNX Node: aten_add[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_logical_or[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.add.Tensor[name=add_135]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.add.Tensor)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___bn2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.add.Tensor[name=add_135]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:add_135[name=add_135]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(add_135)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 47, in forward\n    out = shortcut + residual\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:add_135[name=add_135]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_relu)`",
      "text":"FX Node: aten.relu.default. \nONNX Node: aten_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.relu.default[name=relu_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.relu.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nadd_135: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.relu.default[name=relu_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.copy.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.copy.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::copy.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnon_blocking: False,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_copy)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_copy)`",
      "text":"FX Node: aten.copy.default. \nONNX Node: aten_copy[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.copy.default[name=copy_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.copy.default)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nadd_135: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nrelu_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.copy.default[name=copy_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nadd_135: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nrelu_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_ReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_ReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_ReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___relu_2[name=getattr_l__self___cp_resnet_layer4___1___relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getattr_L__self___cp_resnet_layer4___1___relu_2)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___bn2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nadd_135: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:getattr_L__self___cp_resnet_layer4___1___relu_2[name=getattr_l__self___cp_resnet_layer4___1___relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\ncopy_14: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___bn1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___relu_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___conv2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___bn2_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nadd_135: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ngetattr_l__self___cp_resnet_layer4___1___relu_2: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: resnet_BasicBlock. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(resnet_BasicBlock)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: resnet_BasicBlock. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer4_1_1[name=cp_resnet_layer4_1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer4_1_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer4_0_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer4_1_1[name=cp_resnet_layer4_1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_resnet_layer4_0_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_resnet_layer4_1_1: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_container_Sequential. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_container_Sequential)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_container_Sequential. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_layer4_1[name=cp_resnet_layer4_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_layer4_1)[call_module]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=14](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 37, in forward\n    residual = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_layer4_1[name=cp_resnet_layer4_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=15](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_conv1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_bn1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_relu_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//2) + 1, ((s2 - 1)//2) + 1])`,\ncp_resnet_maxpool_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer1_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//4) + 1, ((s2 - 1)//4) + 1])`,\ncp_resnet_layer2_1: Tuple[length=3](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: resnet_Resnet18. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(resnet_Resnet18)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: resnet_Resnet18. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_resnet_1[name=cp_resnet_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_resnet_1)[call_module]:Tuple[length=7](\nSymInt(((s1 - 1)//8) + 1),\nSymInt(((s2 - 1)//8) + 1),\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nSymInt(((s1 - 1)//16) + 1),\nSymInt(((s2 - 1)//16) + 1),\nTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 74, in forward\n    x = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_resnet_1[name=cp_resnet_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s1 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s2 - 1)//8) + 1)\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s1 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:SymInt(((s2 - 1)//16) + 1)\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_16[name=copy_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_16)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_16[name=copy_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_16[name=copy_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_16)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_16[name=copy_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_16[name=copy_16]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_16)[placeholder]:Tensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 82, in forward\n    feat32 = self.layer4(feat16) # 1/32\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_16[name=copy_16]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/conv/conv/weight[name=cp_arm32_conv_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/conv/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/conv/conv/weight[name=cp_arm32_conv_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[128, 512, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_20]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_conv_weight: `TorchScriptTensor(f32[128, 512, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_20]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_conv_weight: `TorchScriptTensor(f32[128, 512, 3, 3])`,\nconvolution_20: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm32_conv_conv_1[name=cp_arm32_conv_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm32_conv_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm32_conv_conv_1[name=cp_arm32_conv_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_20[name=convolution_20]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_20)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_20[name=convolution_20]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/conv/bn/weight[name=cp_arm32_conv_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/conv/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_20: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/conv/bn/weight[name=cp_arm32_conv_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/conv/bn/bias[name=cp_arm32_conv_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/conv/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_20: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/conv/bn/bias[name=cp_arm32_conv_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/conv/bn/running_mean[name=cp_arm32_conv_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/conv/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_20: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/conv/bn/running_mean[name=cp_arm32_conv_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/conv/bn/running_var[name=cp_arm32_conv_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/conv/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_20: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/conv/bn/running_var[name=cp_arm32_conv_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_20]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_20: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_20]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_62]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_20: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_20: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_62]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_20: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm32_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_20: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_62: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm32_conv_bn_1[name=cp_arm32_conv_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm32_conv_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm32_conv_bn_1[name=cp_arm32_conv_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nleaky_relu: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm32_conv_1[name=cp_arm32_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm32_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm32_conv_1[name=cp_arm32_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.avg_pool2d.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::avg_pool2d.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.avg_pool2d.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.avg_pool2d.default. \nONNX Node: aten_avg_pool2d[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::avg_pool2d.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\nList[length=2](\n15,\n20,\n),\n)\n- onnx_kwargs: Dict[length=5](\nstride: List[length=0](\nNone),\npadding: List[length=2](\n0,\n0,\n),\nceil_mode: False,\ncount_include_pad: True,\ndivisor_override: <class 'NoneType'>,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_avg_pool2d)`\n### Failed: attribute 'stride' type mismatch!\nActual <class 'list'> vs\nExpected AttrType.INTS\n### Failed: attribute 'divisor_override' type mismatch!\nActual <class 'NoneType'> vs\nExpected AttrType.INT\nmatch score: -3\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_avg_pool2d)`",
      "text":"FX Node: aten.avg_pool2d.default. \nONNX Node: aten_avg_pool2d[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.avg_pool2d.default[name=avg_pool2d]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 125, in forward\n    atten = F.avg_pool2d(feat, feat.size()[2:])\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.avg_pool2d.default[name=avg_pool2d]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:avg_pool2d[name=avg_pool2d]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(avg_pool2d)[placeholder]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 125, in forward\n    atten = F.avg_pool2d(feat, feat.size()[2:])\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:avg_pool2d[name=avg_pool2d]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/conv_atten/weight[name=cp_arm32_conv_atten_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/conv_atten/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\navg_pool2d: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/conv_atten/weight[name=cp_arm32_conv_atten_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\n`TorchScriptTensor(f32[128, 128, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_21]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\navg_pool2d: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_conv_atten_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_21]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\navg_pool2d: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_conv_atten_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\nconvolution_21: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm32_conv_atten_1[name=cp_arm32_conv_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm32_conv_atten_1)[call_module]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\navg_pool2d: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm32_conv_atten_1[name=cp_arm32_conv_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_21[name=convolution_21]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_21)[placeholder]:Tensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_21[name=convolution_21]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/bn_atten/weight[name=cp_arm32_bn_atten_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/bn_atten/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_21: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/bn_atten/weight[name=cp_arm32_bn_atten_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/bn_atten/bias[name=cp_arm32_bn_atten_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/bn_atten/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_21: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_bn_atten_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/bn_atten/bias[name=cp_arm32_bn_atten_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/bn_atten/running_mean[name=cp_arm32_bn_atten_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/bn_atten/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_21: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/bn_atten/running_mean[name=cp_arm32_bn_atten_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm32/bn_atten/running_var[name=cp_arm32_bn_atten_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm32/bn_atten/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_21: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm32/bn_atten/running_var[name=cp_arm32_bn_atten_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_21]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_21: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_21]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_65]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_21: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_21: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_65]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_21: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm32_bn_atten_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_21: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_65: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm32_bn_atten_1[name=cp_arm32_bn_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm32_bn_atten_1)[call_module]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\navg_pool2d: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm32_bn_atten_1[name=cp_arm32_bn_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_65[name=getitem_65]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_65)[placeholder]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_65[name=getitem_65]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_sigmoid)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_sigmoid)`",
      "text":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sigmoid.default[name=sigmoid]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_65: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 128, in forward\n    atten = self.sigmoid_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sigmoid.default[name=sigmoid]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_65: `TorchScriptTensor(f32[1, 128, 1, 1])`,\nsigmoid: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_Sigmoid. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_Sigmoid. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm32_sigmoid_atten_1[name=cp_arm32_sigmoid_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm32_sigmoid_atten_1)[call_module]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\navg_pool2d: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_bn_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 128, in forward\n    atten = self.sigmoid_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm32_sigmoid_atten_1[name=cp_arm32_sigmoid_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_136]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\navg_pool2d: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_bn_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\ncp_arm32_sigmoid_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 129, in forward\n    out = torch.mul(feat, atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_136]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_16: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\navg_pool2d: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//32) - 14)//15) + 1, ((((s2 - 1)//32) - 19)//20) + 1])`,\ncp_arm32_bn_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\ncp_arm32_sigmoid_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\nmul_136: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_AttentionRefinementModule. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_AttentionRefinementModule. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm32_1[name=cp_arm32_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm32_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 217, in forward\n    feat32_arm = self.arm32(feat32)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm32_1[name=cp_arm32_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)",
      "text":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(i64[2])`,\nFalse,\n<class 'NoneType'>,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`\n### Failed: attribute 'scale_factors' type mismatch!\nActual <class 'NoneType'> vs\nExpected AttrType.FLOATS\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`",
      "text":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 218, in forward\n    feat32_cat = F.interpolate(feat32_arm, (H8, W8), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)",
      "text":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n`TorchScriptTensor(i64[2])`,\nFalse,\n<class 'NoneType'>,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`\n### Failed: attribute 'scale_factors' type mismatch!\nActual <class 'NoneType'> vs\nExpected AttrType.FLOATS\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`",
      "text":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=11](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 220, in forward\n    feat32_up = F.interpolate(feat32_arm, (H16, W16), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:upsample_bilinear2d_1[name=upsample_bilinear2d_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(upsample_bilinear2d_1)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 220, in forward\n    feat32_up = F.interpolate(feat32_arm, (H16, W16), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:upsample_bilinear2d_1[name=upsample_bilinear2d_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:upsample_bilinear2d_1[name=upsample_bilinear2d_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(upsample_bilinear2d_1)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 220, in forward\n    feat32_up = F.interpolate(feat32_arm, (H16, W16), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:upsample_bilinear2d_1[name=upsample_bilinear2d_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head32/conv/weight[name=cp_conv_head32_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head32/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nupsample_bilinear2d_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head32/conv/weight[name=cp_conv_head32_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[128, 128, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_22]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nupsample_bilinear2d_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_conv_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_22]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nupsample_bilinear2d_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_conv_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\nconvolution_22: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_head32_conv_1[name=cp_conv_head32_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_head32_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nupsample_bilinear2d_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_head32_conv_1[name=cp_conv_head32_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_22[name=convolution_22]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_22)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_22[name=convolution_22]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head32/bn/weight[name=cp_conv_head32_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head32/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_22: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head32/bn/weight[name=cp_conv_head32_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head32/bn/bias[name=cp_conv_head32_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head32/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_22: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head32/bn/bias[name=cp_conv_head32_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head32/bn/running_mean[name=cp_conv_head32_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head32/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_22: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head32/bn/running_mean[name=cp_conv_head32_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head32/bn/running_var[name=cp_conv_head32_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head32/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_22: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head32/bn/running_var[name=cp_conv_head32_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_22]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_22: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_22]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_68]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_22: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_22: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_68]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_22: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_head32_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_22: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_68: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_head32_bn_1[name=cp_conv_head32_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_head32_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nupsample_bilinear2d_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_head32_bn_1[name=cp_conv_head32_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nupsample_bilinear2d_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nupsample_bilinear2d_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_conv_head32_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nleaky_relu_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_head32_1[name=cp_conv_head32_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_head32_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=12](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 221, in forward\n    feat32_up = self.conv_head32(feat32_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_head32_1[name=cp_conv_head32_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_12[name=copy_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_12[name=copy_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_12[name=copy_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_12[name=copy_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_12[name=copy_12]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_12)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 81, in forward\n    feat16 = self.layer3(feat8) # 1/16\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_12[name=copy_12]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/conv/conv/weight[name=cp_arm16_conv_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/conv/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/conv/conv/weight[name=cp_arm16_conv_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[128, 256, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_23]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_conv_weight: `TorchScriptTensor(f32[128, 256, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_23]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_conv_weight: `TorchScriptTensor(f32[128, 256, 3, 3])`,\nconvolution_23: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm16_conv_conv_1[name=cp_arm16_conv_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm16_conv_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm16_conv_conv_1[name=cp_arm16_conv_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_23[name=convolution_23]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_23)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_23[name=convolution_23]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/conv/bn/weight[name=cp_arm16_conv_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/conv/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_23: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/conv/bn/weight[name=cp_arm16_conv_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/conv/bn/bias[name=cp_arm16_conv_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/conv/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_23: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/conv/bn/bias[name=cp_arm16_conv_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/conv/bn/running_mean[name=cp_arm16_conv_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/conv/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_23: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/conv/bn/running_mean[name=cp_arm16_conv_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/conv/bn/running_var[name=cp_arm16_conv_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/conv/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_23: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/conv/bn/running_var[name=cp_arm16_conv_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_23]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_23: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_23]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_71]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_23: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_23: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_71]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_23: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm16_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_23: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_71: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm16_conv_bn_1[name=cp_arm16_conv_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm16_conv_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm16_conv_bn_1[name=cp_arm16_conv_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nleaky_relu_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm16_conv_1[name=cp_arm16_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm16_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm16_conv_1[name=cp_arm16_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.avg_pool2d.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::avg_pool2d.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.avg_pool2d.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.avg_pool2d.default. \nONNX Node: aten_avg_pool2d[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::avg_pool2d.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nList[length=2](\n30,\n40,\n),\n)\n- onnx_kwargs: Dict[length=5](\nstride: List[length=0](\nNone),\npadding: List[length=2](\n0,\n0,\n),\nceil_mode: False,\ncount_include_pad: True,\ndivisor_override: <class 'NoneType'>,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_avg_pool2d)`\n### Failed: attribute 'stride' type mismatch!\nActual <class 'list'> vs\nExpected AttrType.INTS\n### Failed: attribute 'divisor_override' type mismatch!\nActual <class 'NoneType'> vs\nExpected AttrType.INT\nmatch score: -3\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_avg_pool2d)`",
      "text":"FX Node: aten.avg_pool2d.default. \nONNX Node: aten_avg_pool2d[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.avg_pool2d.default[name=avg_pool2d_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 125, in forward\n    atten = F.avg_pool2d(feat, feat.size()[2:])\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.avg_pool2d.default[name=avg_pool2d_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:avg_pool2d_1[name=avg_pool2d_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(avg_pool2d_1)[placeholder]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 125, in forward\n    atten = F.avg_pool2d(feat, feat.size()[2:])\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:avg_pool2d_1[name=avg_pool2d_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/conv_atten/weight[name=cp_arm16_conv_atten_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/conv_atten/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\navg_pool2d_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/conv_atten/weight[name=cp_arm16_conv_atten_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\n`TorchScriptTensor(f32[128, 128, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_24]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\navg_pool2d_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_conv_atten_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_24]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\navg_pool2d_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_conv_atten_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\nconvolution_24: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm16_conv_atten_1[name=cp_arm16_conv_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm16_conv_atten_1)[call_module]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\navg_pool2d_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm16_conv_atten_1[name=cp_arm16_conv_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_24[name=convolution_24]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_24)[placeholder]:Tensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_24[name=convolution_24]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/bn_atten/weight[name=cp_arm16_bn_atten_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/bn_atten/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_24: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/bn_atten/weight[name=cp_arm16_bn_atten_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/bn_atten/bias[name=cp_arm16_bn_atten_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/bn_atten/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_24: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_bn_atten_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/bn_atten/bias[name=cp_arm16_bn_atten_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/bn_atten/running_mean[name=cp_arm16_bn_atten_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/bn_atten/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_24: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/bn_atten/running_mean[name=cp_arm16_bn_atten_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm16/bn_atten/running_var[name=cp_arm16_bn_atten_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm16/bn_atten/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_24: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm16/bn_atten/running_var[name=cp_arm16_bn_atten_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_24]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_24: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_24]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_74]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_24: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_24: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_74]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_24: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm16_bn_atten_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_24: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_74: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm16_bn_atten_1[name=cp_arm16_bn_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm16_bn_atten_1)[call_module]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\navg_pool2d_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm16_bn_atten_1[name=cp_arm16_bn_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_74[name=getitem_74]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_74)[placeholder]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_74[name=getitem_74]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_sigmoid)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_sigmoid)`",
      "text":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sigmoid.default[name=sigmoid_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_74: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 128, in forward\n    atten = self.sigmoid_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sigmoid.default[name=sigmoid_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_74: `TorchScriptTensor(f32[1, 128, 1, 1])`,\nsigmoid_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_Sigmoid. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_Sigmoid. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm16_sigmoid_atten_1[name=cp_arm16_sigmoid_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm16_sigmoid_atten_1)[call_module]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\navg_pool2d_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_bn_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 128, in forward\n    atten = self.sigmoid_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm16_sigmoid_atten_1[name=cp_arm16_sigmoid_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_137]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\navg_pool2d_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_bn_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\ncp_arm16_sigmoid_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 129, in forward\n    out = torch.mul(feat, atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_137]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_12: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_arm16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\navg_pool2d_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//16) - 29)//30) + 1, ((((s2 - 1)//16) - 39)//40) + 1])`,\ncp_arm16_bn_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\ncp_arm16_sigmoid_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_AttentionRefinementModule. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_AttentionRefinementModule. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm16_1[name=cp_arm16_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm16_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=13](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm16_1[name=cp_arm16_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.cat.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::cat.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.cat.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.cat.default. \nONNX Node: aten_cat[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::cat.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\nList[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_cat)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_cat)`",
      "text":"FX Node: aten.cat.default. \nONNX Node: aten_cat[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.cat.default[name=cat]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=14](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 224, in forward\n    feat16_cat = torch.cat([feat32_up,feat16_arm], dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.cat.default[name=cat]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:cat[name=cat]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cat)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 224, in forward\n    feat16_cat = torch.cat([feat32_up,feat16_arm], dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:cat[name=cat]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:cat[name=cat]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cat)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 224, in forward\n    feat16_cat = torch.cat([feat32_up,feat16_arm], dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:cat[name=cat]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp16/conv/weight[name=cp_sp16_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp16/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncat: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp16/conv/weight[name=cp_sp16_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[128, 256, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_25]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncat: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_conv_weight: `TorchScriptTensor(f32[128, 256, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_25]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncat: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_conv_weight: `TorchScriptTensor(f32[128, 256, 1, 1])`,\nconvolution_25: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_sp16_conv_1[name=cp_sp16_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_sp16_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncat: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_sp16_conv_1[name=cp_sp16_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_25[name=convolution_25]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_25)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_25[name=convolution_25]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp16/bn/weight[name=cp_sp16_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp16/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_25: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp16/bn/weight[name=cp_sp16_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp16/bn/bias[name=cp_sp16_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp16/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_25: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp16/bn/bias[name=cp_sp16_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp16/bn/running_mean[name=cp_sp16_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp16/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_25: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp16/bn/running_mean[name=cp_sp16_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp16/bn/running_var[name=cp_sp16_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp16/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_25: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp16/bn/running_var[name=cp_sp16_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_25]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_25: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_25]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_77]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_25: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_25: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_77]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_25: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_sp16_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_25: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_77: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_sp16_bn_1[name=cp_sp16_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_sp16_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncat: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_sp16_bn_1[name=cp_sp16_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncat: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncat: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ncp_sp16_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nleaky_relu_3: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_sp16_1[name=cp_sp16_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_sp16_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=15](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 225, in forward\n    feat16_cat = self.sp16(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_sp16_1[name=cp_sp16_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)",
      "text":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(i64[2])`,\nFalse,\n<class 'NoneType'>,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`\n### Failed: attribute 'scale_factors' type mismatch!\nActual <class 'NoneType'> vs\nExpected AttrType.FLOATS\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`",
      "text":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=16](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 226, in forward\n    feat16_cat = F.interpolate(feat16_cat, (H8, W8), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)",
      "text":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(i64[2])`,\nFalse,\n<class 'NoneType'>,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`\n### Failed: attribute 'scale_factors' type mismatch!\nActual <class 'NoneType'> vs\nExpected AttrType.FLOATS\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`",
      "text":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=17](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 227, in forward\n    feat16_up = F.interpolate(feat16_arm, (H8, W8), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:upsample_bilinear2d_3[name=upsample_bilinear2d_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(upsample_bilinear2d_3)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 227, in forward\n    feat16_up = F.interpolate(feat16_arm, (H8, W8), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:upsample_bilinear2d_3[name=upsample_bilinear2d_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:upsample_bilinear2d_3[name=upsample_bilinear2d_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(upsample_bilinear2d_3)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 227, in forward\n    feat16_up = F.interpolate(feat16_arm, (H8, W8), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:upsample_bilinear2d_3[name=upsample_bilinear2d_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head16/conv/weight[name=cp_conv_head16_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head16/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nupsample_bilinear2d_3: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head16/conv/weight[name=cp_conv_head16_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 128, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_26]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nupsample_bilinear2d_3: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_conv_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_26]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nupsample_bilinear2d_3: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_conv_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\nconvolution_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_head16_conv_1[name=cp_conv_head16_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_head16_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nupsample_bilinear2d_3: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_head16_conv_1[name=cp_conv_head16_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_26[name=convolution_26]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_26)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_26[name=convolution_26]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head16/bn/weight[name=cp_conv_head16_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head16/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head16/bn/weight[name=cp_conv_head16_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head16/bn/bias[name=cp_conv_head16_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head16/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head16/bn/bias[name=cp_conv_head16_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head16/bn/running_mean[name=cp_conv_head16_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head16/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head16/bn/running_mean[name=cp_conv_head16_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_head16/bn/running_var[name=cp_conv_head16_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_head16/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_head16/bn/running_var[name=cp_conv_head16_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_26]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_26]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_80]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_26: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_80]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_26: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_head16_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_26: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_80: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_head16_bn_1[name=cp_conv_head16_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_head16_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nupsample_bilinear2d_3: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_head16_bn_1[name=cp_conv_head16_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nupsample_bilinear2d_3: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nupsample_bilinear2d_3: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_head16_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nleaky_relu_4: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_head16_1[name=cp_conv_head16_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_head16_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=18](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 228, in forward\n    feat16_up = self.conv_head16(feat16_up)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_head16_1[name=cp_conv_head16_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_8[name=copy_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_8[name=copy_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_8[name=copy_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_8[name=copy_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:copy_8[name=copy_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(copy_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 80, in forward\n    feat8 = self.layer2(x) # 1/8\n  File \"/root/Devs/SeAFusion/resnet.py\", line 48, in forward\n    out = self.relu(out)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:copy_8[name=copy_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/conv/conv/weight[name=cp_arm8_conv_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/conv/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/conv/conv/weight[name=cp_arm8_conv_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 128, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_27]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_conv_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_27]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_conv_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\nconvolution_27: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm8_conv_conv_1[name=cp_arm8_conv_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm8_conv_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm8_conv_conv_1[name=cp_arm8_conv_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_27[name=convolution_27]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_27)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_27[name=convolution_27]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/conv/bn/weight[name=cp_arm8_conv_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/conv/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_27: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/conv/bn/weight[name=cp_arm8_conv_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/conv/bn/bias[name=cp_arm8_conv_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/conv/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_27: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/conv/bn/bias[name=cp_arm8_conv_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/conv/bn/running_mean[name=cp_arm8_conv_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/conv/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_27: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/conv/bn/running_mean[name=cp_arm8_conv_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/conv/bn/running_var[name=cp_arm8_conv_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/conv/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_27: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/conv/bn/running_var[name=cp_arm8_conv_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_27]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_27: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_27]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_83]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_27: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_27: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_83]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_27: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm8_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_27: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_83: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm8_conv_bn_1[name=cp_arm8_conv_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm8_conv_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm8_conv_bn_1[name=cp_arm8_conv_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nleaky_relu_5: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm8_conv_1[name=cp_arm8_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm8_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm8_conv_1[name=cp_arm8_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.avg_pool2d.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::avg_pool2d.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.avg_pool2d.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.avg_pool2d.default. \nONNX Node: aten_avg_pool2d[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::avg_pool2d.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nList[length=2](\n60,\n80,\n),\n)\n- onnx_kwargs: Dict[length=5](\nstride: List[length=0](\nNone),\npadding: List[length=2](\n0,\n0,\n),\nceil_mode: False,\ncount_include_pad: True,\ndivisor_override: <class 'NoneType'>,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_avg_pool2d)`\n### Failed: attribute 'stride' type mismatch!\nActual <class 'list'> vs\nExpected AttrType.INTS\n### Failed: attribute 'divisor_override' type mismatch!\nActual <class 'NoneType'> vs\nExpected AttrType.INT\nmatch score: -3\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_avg_pool2d)`",
      "text":"FX Node: aten.avg_pool2d.default. \nONNX Node: aten_avg_pool2d[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.avg_pool2d.default[name=avg_pool2d_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.avg_pool2d.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 125, in forward\n    atten = F.avg_pool2d(feat, feat.size()[2:])\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.avg_pool2d.default[name=avg_pool2d_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:avg_pool2d_2[name=avg_pool2d_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(avg_pool2d_2)[placeholder]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 125, in forward\n    atten = F.avg_pool2d(feat, feat.size()[2:])\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:avg_pool2d_2[name=avg_pool2d_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/conv_atten/weight[name=cp_arm8_conv_atten_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/conv_atten/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\navg_pool2d_2: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/conv_atten/weight[name=cp_arm8_conv_atten_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\n`TorchScriptTensor(f32[128, 128, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_28]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\navg_pool2d_2: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_conv_atten_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_28]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\navg_pool2d_2: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_conv_atten_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\nconvolution_28: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm8_conv_atten_1[name=cp_arm8_conv_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm8_conv_atten_1)[call_module]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\navg_pool2d_2: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm8_conv_atten_1[name=cp_arm8_conv_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_28[name=convolution_28]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_28)[placeholder]:Tensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 126, in forward\n    atten = self.conv_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_28[name=convolution_28]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/bn_atten/weight[name=cp_arm8_bn_atten_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/bn_atten/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_28: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/bn_atten/weight[name=cp_arm8_bn_atten_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/bn_atten/bias[name=cp_arm8_bn_atten_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/bn_atten/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_28: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_bn_atten_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/bn_atten/bias[name=cp_arm8_bn_atten_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/bn_atten/running_mean[name=cp_arm8_bn_atten_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/bn_atten/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_28: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/bn_atten/running_mean[name=cp_arm8_bn_atten_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/arm8/bn_atten/running_var[name=cp_arm8_bn_atten_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/arm8/bn_atten/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_28: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/arm8/bn_atten/running_var[name=cp_arm8_bn_atten_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_28]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, 1, 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_28: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_28]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_86]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_28: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_28: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_86]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_28: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_bn_atten_weight: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_bias: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_running_mean: `TorchScriptTensor(f32[128])`,\ncp_arm8_bn_atten_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_28: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_86: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm8_bn_atten_1[name=cp_arm8_bn_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm8_bn_atten_1)[call_module]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\navg_pool2d_2: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm8_bn_atten_1[name=cp_arm8_bn_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_86[name=getitem_86]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_86)[placeholder]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 127, in forward\n    atten = self.bn_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_86[name=getitem_86]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_sigmoid)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_sigmoid)`",
      "text":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sigmoid.default[name=sigmoid_2]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_86: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 128, in forward\n    atten = self.sigmoid_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sigmoid.default[name=sigmoid_2]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_86: `TorchScriptTensor(f32[1, 128, 1, 1])`,\nsigmoid_2: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_Sigmoid. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_Sigmoid. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm8_sigmoid_atten_1[name=cp_arm8_sigmoid_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm8_sigmoid_atten_1)[call_module]:Tensor(f32[1, 128, 1, 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\navg_pool2d_2: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_bn_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 128, in forward\n    atten = self.sigmoid_atten(atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm8_sigmoid_atten_1[name=cp_arm8_sigmoid_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_138]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\navg_pool2d_2: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_bn_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\ncp_arm8_sigmoid_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 129, in forward\n    out = torch.mul(feat, atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_138]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\ncopy_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_arm8_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\navg_pool2d_2: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_conv_atten_1: `TorchScriptTensor(f32[1, 128, ((((s1 - 1)//8) - 59)//60) + 1, ((((s2 - 1)//8) - 79)//80) + 1])`,\ncp_arm8_bn_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\ncp_arm8_sigmoid_atten_1: `TorchScriptTensor(f32[1, 128, 1, 1])`,\nmul_138: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_AttentionRefinementModule. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_AttentionRefinementModule)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_AttentionRefinementModule. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_arm8_1[name=cp_arm8_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_arm8_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=19](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 230, in forward\n    feat8_arm = self.arm8(feat8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 124, in forward\n    feat = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_arm8_1[name=cp_arm8_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.cat.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::cat.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.cat.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.cat.default. \nONNX Node: aten_cat[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::cat.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\nList[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_cat)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_cat)`",
      "text":"FX Node: aten.cat.default. \nONNX Node: aten_cat[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.cat.default[name=cat_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.cat.default)[call_function]:Tensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=20](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 231, in forward\n    feat8_cat = torch.cat([feat16_up,feat8_arm], dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.cat.default[name=cat_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:cat_1[name=cat_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cat_1)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 231, in forward\n    feat8_cat = torch.cat([feat16_up,feat8_arm], dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:cat_1[name=cat_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:cat_1[name=cat_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cat_1)[placeholder]:Tensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 231, in forward\n    feat8_cat = torch.cat([feat16_up,feat8_arm], dim=1)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:cat_1[name=cat_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp8/conv/weight[name=cp_sp8_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp8/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncat_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp8/conv/weight[name=cp_sp8_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 256, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_29]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncat_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_conv_weight: `TorchScriptTensor(f32[128, 256, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_29]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncat_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_conv_weight: `TorchScriptTensor(f32[128, 256, 1, 1])`,\nconvolution_29: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_sp8_conv_1[name=cp_sp8_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_sp8_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ncat_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_sp8_conv_1[name=cp_sp8_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_29[name=convolution_29]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_29)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_29[name=convolution_29]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp8/bn/weight[name=cp_sp8_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp8/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_29: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp8/bn/weight[name=cp_sp8_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp8/bn/bias[name=cp_sp8_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp8/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_29: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp8/bn/bias[name=cp_sp8_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp8/bn/running_mean[name=cp_sp8_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp8/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_29: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp8/bn/running_mean[name=cp_sp8_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/sp8/bn/running_var[name=cp_sp8_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/sp8/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_29: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/sp8/bn/running_var[name=cp_sp8_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_29]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_29: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_29]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_89]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_29: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_29: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_89]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_29: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_sp8_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_29: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_89: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_sp8_bn_1[name=cp_sp8_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_sp8_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ncat_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_sp8_bn_1[name=cp_sp8_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_6]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\ncat_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_6]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\ncat_1: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_sp8_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nleaky_relu_6: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_sp8_1[name=cp_sp8_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_sp8_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=21](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 232, in forward\n    feat8_cat = self.sp8(feat8_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_sp8_1[name=cp_sp8_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:upsample_bilinear2d[name=upsample_bilinear2d]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(upsample_bilinear2d)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 218, in forward\n    feat32_cat = F.interpolate(feat32_arm, (H8, W8), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:upsample_bilinear2d[name=upsample_bilinear2d]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:upsample_bilinear2d[name=upsample_bilinear2d]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(upsample_bilinear2d)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 218, in forward\n    feat32_cat = F.interpolate(feat32_arm, (H8, W8), mode='bilinear')\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:upsample_bilinear2d[name=upsample_bilinear2d]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse1/conv/weight[name=cp_conv_fuse1_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse1/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nupsample_bilinear2d: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse1/conv/weight[name=cp_conv_fuse1_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 128, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_30]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nupsample_bilinear2d: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_conv_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_30]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nupsample_bilinear2d: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_conv_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\nconvolution_30: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse1_conv_1[name=cp_conv_fuse1_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse1_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nupsample_bilinear2d: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse1_conv_1[name=cp_conv_fuse1_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_30[name=convolution_30]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_30)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_30[name=convolution_30]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse1/bn/weight[name=cp_conv_fuse1_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse1/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_30: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse1/bn/weight[name=cp_conv_fuse1_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse1/bn/bias[name=cp_conv_fuse1_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse1/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_30: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse1/bn/bias[name=cp_conv_fuse1_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse1/bn/running_mean[name=cp_conv_fuse1_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse1/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_30: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse1/bn/running_mean[name=cp_conv_fuse1_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse1/bn/running_var[name=cp_conv_fuse1_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse1/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_30: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse1/bn/running_var[name=cp_conv_fuse1_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_30]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_30: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_30]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_92]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_30: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_30: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_92]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_30: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse1_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_30: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_92: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse1_bn_1[name=cp_conv_fuse1_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse1_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nupsample_bilinear2d: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse1_bn_1[name=cp_conv_fuse1_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_92[name=getitem_92]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_92)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_92[name=getitem_92]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_sigmoid)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_sigmoid)`",
      "text":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sigmoid.default[name=sigmoid_3]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_92: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 54, in forward\n    x = self.sigmoid_atten(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sigmoid.default[name=sigmoid_3]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_92: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nsigmoid_3: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_Sigmoid. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_Sigmoid. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse1_sigmoid_atten_1[name=cp_conv_fuse1_sigmoid_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse1_sigmoid_atten_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nupsample_bilinear2d: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 54, in forward\n    x = self.sigmoid_atten(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse1_sigmoid_atten_1[name=cp_conv_fuse1_sigmoid_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nupsample_bilinear2d: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse1_sigmoid_atten_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNSig. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNSig. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse1_1[name=cp_conv_fuse1_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse1_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=22](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 234, in forward\n    feat16_atten = self.conv_fuse1(feat32_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse1_1[name=cp_conv_fuse1_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_139]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=23](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 235, in forward\n    feat16_cat = feat16_atten*feat16_cat\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_139]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:mul_139[name=mul_139]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(mul_139)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 235, in forward\n    feat16_cat = feat16_atten*feat16_cat\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:mul_139[name=mul_139]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:mul_139[name=mul_139]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(mul_139)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 235, in forward\n    feat16_cat = feat16_atten*feat16_cat\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:mul_139[name=mul_139]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse2/conv/weight[name=cp_conv_fuse2_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse2/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nmul_139: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse2/conv/weight[name=cp_conv_fuse2_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 128, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_31]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nmul_139: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_conv_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_31]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nmul_139: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_conv_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\nconvolution_31: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse2_conv_1[name=cp_conv_fuse2_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse2_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nmul_139: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse2_conv_1[name=cp_conv_fuse2_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_31[name=convolution_31]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_31)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_31[name=convolution_31]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse2/bn/weight[name=cp_conv_fuse2_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse2/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_31: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse2/bn/weight[name=cp_conv_fuse2_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse2/bn/bias[name=cp_conv_fuse2_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse2/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_31: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse2/bn/bias[name=cp_conv_fuse2_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse2/bn/running_mean[name=cp_conv_fuse2_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse2/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_31: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse2/bn/running_mean[name=cp_conv_fuse2_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse2/bn/running_var[name=cp_conv_fuse2_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse2/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_31: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse2/bn/running_var[name=cp_conv_fuse2_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_31]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_31: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_31]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_95]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_31: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_31: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_95]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_31: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse2_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_31: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_95: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse2_bn_1[name=cp_conv_fuse2_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse2_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nmul_139: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse2_bn_1[name=cp_conv_fuse2_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:getitem_95[name=getitem_95]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(getitem_95)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 53, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:getitem_95[name=getitem_95]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sigmoid.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sigmoid.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_sigmoid)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_sigmoid)`",
      "text":"FX Node: aten.sigmoid.default. \nONNX Node: aten_sigmoid[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sigmoid.default[name=sigmoid_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sigmoid.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\ngetitem_95: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 54, in forward\n    x = self.sigmoid_atten(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sigmoid.default[name=sigmoid_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\ngetitem_95: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nsigmoid_4: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_activation_Sigmoid. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_activation_Sigmoid)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_activation_Sigmoid. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse2_sigmoid_atten_1[name=cp_conv_fuse2_sigmoid_atten_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse2_sigmoid_atten_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nmul_139: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 54, in forward\n    x = self.sigmoid_atten(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse2_sigmoid_atten_1[name=cp_conv_fuse2_sigmoid_atten_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nmul_139: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse2_sigmoid_atten_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNSig. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNSig)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNSig. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse2_1[name=cp_conv_fuse2_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse2_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=24](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 237, in forward\n    feat8_atten = self.conv_fuse2(feat16_cat)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 52, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse2_1[name=cp_conv_fuse2_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.mul.Tensor' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=2](\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\nregistration.ONNXFunction(aten::mul.Tensor, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_mul_bool)`\n### Failed: input type mismatch for input 'self'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\n### Failed: input type mismatch for input 'other'!\nActual {'tensor(float)'} vs\nExpected {'tensor(bool)'}\nmatch score: 0\n## Checking perfect match...\n`OnnxFunction(aten_mul)`\nmatch score: 2\n## Return values\n`OnnxFunction(aten_mul)`",
      "text":"FX Node: aten.mul.Tensor. \nONNX Node: aten_mul[opset=pkg.onnxscript.torch_lib;is_custom=False]. \nONNX Node: aten_mul_bool[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.mul.Tensor[name=mul_140]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.mul.Tensor)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=25](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 238, in forward\n    feat8_out = feat8_cat*feat8_atten\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.mul.Tensor[name=mul_140]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:mul_140[name=mul_140]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(mul_140)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 238, in forward\n    feat8_out = feat8_cat*feat8_atten\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:mul_140[name=mul_140]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:mul_140[name=mul_140]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(mul_140)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 238, in forward\n    feat8_out = feat8_cat*feat8_atten\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:mul_140[name=mul_140]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse/conv/weight[name=cp_conv_fuse_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nmul_140: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse/conv/weight[name=cp_conv_fuse_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 128, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_32]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nmul_140: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_conv_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_32]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nmul_140: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_conv_weight: `TorchScriptTensor(f32[128, 128, 1, 1])`,\nconvolution_32: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse_conv_1[name=cp_conv_fuse_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nmul_140: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse_conv_1[name=cp_conv_fuse_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_32[name=convolution_32]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_32)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_32[name=convolution_32]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse/bn/weight[name=cp_conv_fuse_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_32: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse/bn/weight[name=cp_conv_fuse_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse/bn/bias[name=cp_conv_fuse_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_32: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse/bn/bias[name=cp_conv_fuse_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse/bn/running_mean[name=cp_conv_fuse_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_32: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse/bn/running_mean[name=cp_conv_fuse_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:cp/conv_fuse/bn/running_var[name=cp_conv_fuse_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp/conv_fuse/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_32: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:cp/conv_fuse/bn/running_var[name=cp_conv_fuse_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_32]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_32: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_32]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_98]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_32: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_32: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_98]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_32: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_bn_weight: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_bias: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_running_mean: `TorchScriptTensor(f32[128])`,\ncp_conv_fuse_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_32: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_98: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse_bn_1[name=cp_conv_fuse_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nmul_140: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse_bn_1[name=cp_conv_fuse_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nmul_140: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nmul_140: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ncp_conv_fuse_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_conv_fuse_1[name=cp_conv_fuse_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_conv_fuse_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=26](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_conv_fuse_1[name=cp_conv_fuse_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=27](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_resnet_1: Tuple[length=7](\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(i64[1])`,\n`TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n),\ngetitem: `TorchScriptTensor(i64[1])`,\ngetitem_1: `TorchScriptTensor(i64[1])`,\ngetitem_2: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\ngetitem_3: `TorchScriptTensor(i64[1])`,\ngetitem_4: `TorchScriptTensor(i64[1])`,\ngetitem_5: `TorchScriptTensor(f32[1, 256, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_6: `TorchScriptTensor(f32[1, 512, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\ncp_arm32_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//32) + 1, ((s2 - 1)//32) + 1])`,\n...\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ContextPath. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ContextPath)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ContextPath. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:cp_1[name=cp_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(cp_1)[call_module]:Tuple[length=2](\nTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\n)\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 209, in forward\n    _, feat8, feat16, feat32 = self.resnet(x)\n  File \"/root/Devs/SeAFusion/resnet.py\", line 74, in forward\n    x = self.conv1(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:cp_1[name=cp_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 129, in forward\n    out = torch.mul(feat, atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:leaky_relu_7[name=leaky_relu_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(leaky_relu_7)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:leaky_relu_7[name=leaky_relu_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:leaky_relu_7[name=leaky_relu_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(leaky_relu_7)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:leaky_relu_7[name=leaky_relu_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:leaky_relu_7[name=leaky_relu_7]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(leaky_relu_7)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 242, in forward\n    feat8_out = self.conv_fuse(feat8_out)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:leaky_relu_7[name=leaky_relu_7]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out/conv/conv/weight[name=conv_out_conv_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out/conv/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out/conv/conv/weight[name=conv_out_conv_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128, 128, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_33]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_conv_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_33]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_conv_weight: `TorchScriptTensor(f32[128, 128, 3, 3])`,\nconvolution_33: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out_conv_conv_1[name=conv_out_conv_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out_conv_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out_conv_conv_1[name=conv_out_conv_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_33[name=convolution_33]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_33)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_33[name=convolution_33]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out/conv/bn/weight[name=conv_out_conv_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out/conv/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_33: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out/conv/bn/weight[name=conv_out_conv_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out/conv/bn/bias[name=conv_out_conv_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out/conv/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_33: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_bn_weight: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out/conv/bn/bias[name=conv_out_conv_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out/conv/bn/running_mean[name=conv_out_conv_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out/conv/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_33: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_bn_weight: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_bias: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out/conv/bn/running_mean[name=conv_out_conv_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out/conv/bn/running_var[name=conv_out_conv_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out/conv/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_33: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_bn_weight: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_bias: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out/conv/bn/running_var[name=conv_out_conv_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n`TorchScriptTensor(f32[128])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_33]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_33: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_bn_weight: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_bias: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_33]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_101]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_33: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_bn_weight: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_bias: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_33: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_101]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_33: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_bn_weight: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_bias: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_running_mean: `TorchScriptTensor(f32[128])`,\nconv_out_conv_bn_running_var: `TorchScriptTensor(f32[128])`,\n_native_batch_norm_legit_no_training_33: Tuple[length=3](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_101: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out_conv_bn_1[name=conv_out_conv_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out_conv_bn_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out_conv_bn_1[name=conv_out_conv_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_bn_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nleaky_relu_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out_conv_1[name=conv_out_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out_conv_1)[call_module]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out_conv_1[name=conv_out_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:leaky_relu_8[name=leaky_relu_8]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(leaky_relu_8)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:leaky_relu_8[name=leaky_relu_8]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out/conv_out/weight[name=conv_out_conv_out_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out/conv_out/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nleaky_relu_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 72, in forward\n    x = self.conv_out(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out/conv_out/weight[name=conv_out_conv_out_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(f32[9, 128, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_34]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nleaky_relu_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_out_weight: `TorchScriptTensor(f32[9, 128, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 72, in forward\n    x = self.conv_out(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_34]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nleaky_relu_8: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_out_weight: `TorchScriptTensor(f32[9, 128, 1, 1])`,\nconvolution_34: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out_conv_out_1[name=conv_out_conv_out_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out_conv_out_1)[call_module]:Tensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 72, in forward\n    x = self.conv_out(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out_conv_out_1[name=conv_out_conv_out_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nleaky_relu_7: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_conv_out_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_BiSeNetOutput. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_BiSeNetOutput. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out_1[name=conv_out_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out_1)[call_module]:Tensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 365, in forward\n    feat_out = self.conv_out(feat_res8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out_1[name=conv_out_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = self.conv_out(feat_res8)"
         },
         "startLine":365
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:mul_137[name=mul_137]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(mul_137)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 129, in forward\n    out = torch.mul(feat, atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:mul_137[name=mul_137]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:mul_137[name=mul_137]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(mul_137)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 129, in forward\n    out = torch.mul(feat, atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:mul_137[name=mul_137]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:mul_137[name=mul_137]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(mul_137)[placeholder]:Tensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 361, in forward\n    feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 223, in forward\n    feat16_arm = self.arm16(feat16)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 129, in forward\n    out = torch.mul(feat, atten)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:mul_137[name=mul_137]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_res8, feat_cp8, feat_cp16 = self.cp(x) # here return res3b1 feature"
         },
         "startLine":361
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out16/conv/conv/weight[name=conv_out16_conv_conv_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16/conv/conv/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out16/conv/conv/weight[name=conv_out16_conv_conv_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[64, 128, 3, 3])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_35]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_conv_weight: `TorchScriptTensor(f32[64, 128, 3, 3])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_35]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_conv_weight: `TorchScriptTensor(f32[64, 128, 3, 3])`,\nconvolution_35: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out16_conv_conv_1[name=conv_out16_conv_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16_conv_conv_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out16_conv_conv_1[name=conv_out16_conv_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:convolution_35[name=convolution_35]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(convolution_35)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:convolution_35[name=convolution_35]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out16/conv/bn/weight[name=conv_out16_conv_bn_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16/conv/bn/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nconvolution_35: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out16/conv/bn/weight[name=conv_out16_conv_bn_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out16/conv/bn/bias[name=conv_out16_conv_bn_bias]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16/conv/bn/bias)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nconvolution_35: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_bn_weight: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out16/conv/bn/bias[name=conv_out16_conv_bn_bias]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out16/conv/bn/running_mean[name=conv_out16_conv_bn_running_mean]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16/conv/bn/running_mean)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nconvolution_35: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_bn_weight: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_bias: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out16/conv/bn/running_mean[name=conv_out16_conv_bn_running_mean]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out16/conv/bn/running_var[name=conv_out16_conv_bn_running_var]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16/conv/bn/running_var)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nconvolution_35: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_bn_weight: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_bias: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_running_mean: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out16/conv/bn/running_var[name=conv_out16_conv_bn_running_var]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten._native_batch_norm_legit_no_training.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::_native_batch_norm_legit_no_training.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=7](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n`TorchScriptTensor(f32[64])`,\n0.1,\n1e-05,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`\nmatch score: 5\n## Return values\n`TracedOnnxFunction(aten__native_batch_norm_no_training)`",
      "text":"FX Node: aten._native_batch_norm_legit_no_training.default. \nONNX Node: aten__native_batch_norm_no_training[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_34]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten._native_batch_norm_legit_no_training.default)[call_function]:Tuple[length=3](\nTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1]),\nTensor(f32[0]),\nTensor(f32[0]),\n)\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nconvolution_35: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_bn_weight: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_bias: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_running_mean: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_running_var: `TorchScriptTensor(f32[64])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten._native_batch_norm_legit_no_training.default[name=_native_batch_norm_legit_no_training_34]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:<built-in function getitem>[name=getitem_104]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(<built-in function getitem>)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nconvolution_35: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_bn_weight: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_bias: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_running_mean: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_34: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:<built-in function getitem>[name=getitem_104]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nconvolution_35: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_bn_weight: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_bias: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_running_mean: `TorchScriptTensor(f32[64])`,\nconv_out16_conv_bn_running_var: `TorchScriptTensor(f32[64])`,\n_native_batch_norm_legit_no_training_34: Tuple[length=3](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[0])`,\n`TorchScriptTensor(f32[0])`,\n),\ngetitem_104: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_batchnorm_BatchNorm2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_batchnorm_BatchNorm2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out16_conv_bn_1[name=conv_out16_conv_bn_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16_conv_bn_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_conv_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 28, in forward\n    x = self.bn(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out16_conv_bn_1[name=conv_out16_conv_bn_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.leaky_relu.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::leaky_relu.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=1](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n- onnx_kwargs: Dict[length=1](\nnegative_slope: 0.01,\n)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`OnnxFunction(aten_leaky_relu)`\nmatch score: 1\n## Return values\n`OnnxFunction(aten_leaky_relu)`",
      "text":"FX Node: aten.leaky_relu.default. \nONNX Node: aten_leaky_relu[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.leaky_relu.default)[call_function]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_conv_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_bn_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.leaky_relu.default[name=leaky_relu_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=4](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_conv_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_bn_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nleaky_relu_9: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_ConvBNReLU. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_ConvBNReLU)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_ConvBNReLU. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out16_conv_1[name=conv_out16_conv_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16_conv_1)[call_module]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out16_conv_1[name=conv_out16_conv_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: placeholder:leaky_relu_9[name=leaky_relu_9]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(leaky_relu_9)[placeholder]:Tensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=0](\nNone)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 29, in forward\n    x = F.leaky_relu(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: placeholder:leaky_relu_9[name=leaky_relu_9]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: get_attr:conv_out16/conv_out/weight[name=conv_out16_conv_out_weight]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16/conv_out/weight)[get_attr]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=1](\nleaky_relu_9: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 72, in forward\n    x = self.conv_out(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: get_attr:conv_out16/conv_out/weight[name=conv_out16_conv_out_weight]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.convolution.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::convolution.default, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=9](\n`TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[9, 64, 1, 1])`,\n<class 'NoneType'>,\nList[length=2](\n1,\n1,\n),\nList[length=2](\n0,\n0,\n),\nList[length=2](\n1,\n1,\n),\nFalse,\nList[length=2](\n0,\n0,\n),\n1,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_convolution)`\nmatch score: -2\n## Return values\n`TracedOnnxFunction(aten_convolution)`",
      "text":"FX Node: aten.convolution.default. \nONNX Node: aten_convolution[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.convolution.default[name=convolution_36]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.convolution.default)[call_function]:Tensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nleaky_relu_9: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_out_weight: `TorchScriptTensor(f32[9, 64, 1, 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 72, in forward\n    x = self.conv_out(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.convolution.default[name=convolution_36]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nleaky_relu_9: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_out_weight: `TorchScriptTensor(f32[9, 64, 1, 1])`,\nconvolution_36: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: torch_nn_modules_conv_Conv2d. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(torch_nn_modules_conv_Conv2d)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: torch_nn_modules_conv_Conv2d. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out16_conv_out_1[name=conv_out16_conv_out_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16_conv_out_1)[call_module]:Tensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=2](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 72, in forward\n    x = self.conv_out(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out16_conv_out_1[name=conv_out16_conv_out_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=3](\nmul_137: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_1: `TorchScriptTensor(f32[1, 64, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nconv_out16_conv_out_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: model_TII_BiSeNetOutput. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule(model_TII_BiSeNetOutput)\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- parent_onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: model_TII_BiSeNetOutput. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_module:conv_out16_1[name=conv_out16_1]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(conv_out16_1)[call_module]:Tensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=5](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 366, in forward\n    feat_out16 = self.conv_out16(feat_cp8)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 71, in forward\n    x = self.conv(x)\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 27, in forward\n    x = self.conv(x)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_module:conv_out16_1[name=conv_out16_1]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = self.conv_out16(feat_cp8)"
         },
         "startLine":366
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(s1)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(s1)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 3, s1, s2])`,\n2,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_sym_size)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_sym_size)`",
      "text":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_26]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(s1)\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=6](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out16_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 369, in forward\n    feat_out = F.interpolate(feat_out, (H, W), mode='bilinear', align_corners=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_26]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = F.interpolate(feat_out, (H, W), mode='bilinear', align_corners=True)"
         },
         "startLine":369
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(s2)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)",
      "text":"Searching operator overload: 'aten.sym_size.int' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(s2)\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(aten::sym_size.int, is_custom=False, is_complex=False),\n)\n- onnx_args: Tuple[length=2](\n`TorchScriptTensor(f32[1, 3, s1, s2])`,\n3,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_sym_size)`\nmatch score: 1\n## Return values\n`TracedOnnxFunction(aten_sym_size)`",
      "text":"FX Node: aten.sym_size.int. \nONNX Node: aten_sym_size[opset=pkg.onnxscript.torch_lib;is_custom=False]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_27]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(aten.sym_size.int)[call_function]:SymInt(s2)\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=7](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out16_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nsym_size_int_26: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 369, in forward\n    feat_out = F.interpolate(feat_out, (H, W), mode='bilinear', align_corners=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:aten.sym_size.int[name=sym_size_int_27]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = F.interpolate(feat_out, (H, W), mode='bilinear', align_corners=True)"
         },
         "startLine":369
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)",
      "text":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n`TorchScriptTensor(i64[2])`,\nTrue,\n<class 'NoneType'>,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`\n### Failed: attribute 'scale_factors' type mismatch!\nActual <class 'NoneType'> vs\nExpected AttrType.FLOATS\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`",
      "text":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_4]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=8](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out16_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nsym_size_int_26: `TorchScriptTensor(i64[1])`,\nsym_size_int_27: `TorchScriptTensor(i64[1])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 369, in forward\n    feat_out = F.interpolate(feat_out, (H, W), mode='bilinear', align_corners=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_4]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out = F.interpolate(feat_out, (H, W), mode='bilinear', align_corners=True)"
         },
         "startLine":369
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher.get_function_overloads\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2])\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Return values\nList[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)",
      "text":"Searching operator overload: 'onnx_export.upsample_bilinear2d.default' in onnx registry...\n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher.get_function_overloads"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":329
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0016",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n\n\n## Additional Message:\n\n## Function Signature\n### Function Signature OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction\n- self: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2])\n- default_and_custom_functions: List[length=1](\nregistration.ONNXFunction(onnx_export::upsample_bilinear2d.default, is_custom=True, is_complex=False),\n)\n- onnx_args: Tuple[length=4](\n`TorchScriptTensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(i64[2])`,\nTrue,\n<class 'NoneType'>,\n)\n- onnx_kwargs: Dict[length=0](\nNone)\n- diagnostic_context: <class 'torch.onnx._internal.fx.diagnostics.DiagnosticContext'>\n## Checking perfect match...\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`\n### Failed: attribute 'scale_factors' type mismatch!\nActual <class 'NoneType'> vs\nExpected AttrType.FLOATS\nmatch score: 1\n### Exact match is not found!\nCannot find a perfect match of symbolic overload, a nearest match is found. Please check the ONNX output carefully. \n\n## Return values\n`TracedOnnxFunction(aten_upsample_bilinear2d_vec)`",
      "text":"FX Node: onnx_export.upsample_bilinear2d.default. \nONNX Node: aten_upsample_bilinear2d_vec[opset=pkg.onnxscript.torch_lib;is_custom=True]. \n"
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"fail",
     "level":"warning",
     "locations":[
      {
       "message":{
        "text":"OnnxFunctionDispatcher._find_the_perfect_or_nearest_match_onnxfunction"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/onnxfunction_dispatcher.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":179
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0014",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_5]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(onnx_export.upsample_bilinear2d.default)[call_function]:Tensor(f32[1, 9, s1, s2])\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=9](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out16_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nsym_size_int_26: `TorchScriptTensor(i64[1])`,\nsym_size_int_27: `TorchScriptTensor(i64[1])`,\nupsample_bilinear2d_4: `TorchScriptTensor(f32[1, 9, s1, s2])`,\n)\n## PyTorch source information\n```\n  File \"/root/Devs/SeAFusion/model_TII.py\", line 370, in forward\n    feat_out16 = F.interpolate(feat_out16, (H, W), mode='bilinear', align_corners=True)\n\n```\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: call_function:onnx_export.upsample_bilinear2d.default[name=upsample_bilinear2d_5]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      },
      {
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/model_TII.py"
        },
        "region":{
         "snippet":{
          "text":"feat_out16 = F.interpolate(feat_out16, (H, W), mode='bilinear', align_corners=True)"
         },
         "startLine":370
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Node: output:output[name=output]. \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run_node\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- node: fx.Node(output)[output]:None\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n- onnxscript_graph: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>\n- onnxscript_tracer: <class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptTracingEvaluator'>\n- fx_name_to_onnxscript_value: Dict[length=10](\nl_x_: `TorchScriptTensor(f32[1, 3, s1, s2])`,\ncp_1: Tuple[length=2](\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\n`TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\n),\ngetitem: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\ngetitem_1: `TorchScriptTensor(f32[1, 128, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//8) + 1, ((s2 - 1)//8) + 1])`,\nconv_out16_1: `TorchScriptTensor(f32[1, 9, ((s1 - 1)//16) + 1, ((s2 - 1)//16) + 1])`,\nsym_size_int_26: `TorchScriptTensor(i64[1])`,\nsym_size_int_27: `TorchScriptTensor(i64[1])`,\nupsample_bilinear2d_4: `TorchScriptTensor(f32[1, 9, s1, s2])`,\nupsample_bilinear2d_5: `TorchScriptTensor(f32[1, 9, s1, s2])`,\n)\n## Return values\n<class 'NoneType'>",
      "text":"FX Node: output:output[name=output]. "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run_node"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":388
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0008",
     "stacks":[]
    },
    {
     "message":{
      "markdown":"FX Graph: . \n\n## Additional Message:\n\n## Function Signature\n### Function Signature FxOnnxInterpreter.run\n- self: <class 'torch.onnx._internal.fx.fx_onnx_interpreter.FxOnnxInterpreter'>\n- fx_graph_module: torch.fx.GraphModule()\n- onnxfunction_dispatcher: <class 'torch.onnx._internal.fx.onnxfunction_dispatcher.OnnxFunctionDispatcher'>\n## Return values\n<class 'onnxscript.function_libs.torch_lib.graph_building._graph_building_torch.TorchScriptGraph'>",
      "text":"FX Graph: . "
     },
     "codeFlows":[
      {
       "threadFlows":[
        {
         "locations":[]
        }
       ]
      }
     ],
     "graphs":[],
     "kind":"informational",
     "level":"none",
     "locations":[
      {
       "message":{
        "text":"FxOnnxInterpreter.run"
       },
       "physicalLocation":{
        "artifactLocation":{
         "uri":"/root/Devs/SeAFusion/.venv/lib/python3.9/site-packages/torch/onnx/_internal/fx/fx_onnx_interpreter.py"
        },
        "region":{
         "snippet":{
          "text":"@diagnostics.diagnose_call("
         },
         "startLine":463
        }
       }
      }
     ],
     "properties":{
      "tags":[]
     },
     "ruleId":"FXE0007",
     "stacks":[]
    }
   ]
  }
 ],
 "version":"2.1.0",
 "schemaUri":"https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/schemas/sarif-schema-2.1.0.json"
}